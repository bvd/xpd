/**
-netbeans ide:
-functie, gebruik tab
-go to definition doet het vaak niet. gebruik navigatie (doet het niet als je fouten hebt)
-gebruik code assist (geeft wel erg veel terug)
-ctrl-g = go to line
-variabelen worden niet gezien, alleen functies (!) maar bij aptana is het nog erger (bij classes dus niet), bij de geclassificeerde dingen krijg je minder code assist dan bij genamespacete functies (demo)

-over het ontwerp: rechtsboven evt. tags?

-algemene flow vd code: gegevens zitten in de database (primitief)
-controllers kunnen hier samengestelde objecten van maken (mapping)
-andere controllers halen die samengestelde gegevens op (vdvw.c.VisualizeBlaBla)
-package xpd.viz bepaalt hoe e.e.a. wordt weergegeven en hangt het mapped object aan het scherm 
element en maakt een (liefst zichzelf opruimende eenmalige) event listener aan en stopt e.e.a. in de flush
-bij een click altijd naar onClick die weer bepaalt wat er gaat gebeuren, namelijk samengestelde objecten 
verzamelen en deze wederom visualiseren

-belangrijke eigenschappen vd data
-id
-EntityName

-belangrijke constants
-xpd.Relations
-vdvw.m.Dingetje.EntityName()
-xpd.viewState
-xpd.db

-database
-bekijk de history tables
-boolean args bij associationtable, uniekerigheid
-query object (479)

-gaarne alle icons in het daartoe bestemde mapje onder images
-gaarne alle (nep)bezoekers gerelateerde data zoals pasfoto in mapje data/user/pasfoto etc.

-gaarne alle factories een f of F voorvoegsel in de functie (dit is met name belangrijk in de view, 
voor dingen die op bestelling gemaakt moeten kunnen worden zoals formats, templates, etc).

-where from is ' + bookPrint.id); ---> dit soort query voor een from -> to relatie behoeft wat uitleg.... (regel 719 plusminus)

-definities van breadcrumb templates staan bovenaan in de pagina als gek soort van script

-de templates van breadcrumbs verwijzen naar verschillende samengestelde objecten in xpd.Mappers
 */
var noop = function(){ 
    var nada = 0; 
}
var noopArg = function(arg){
    var org = arg;
}
var vdvw = {};
var xpd = {};
var staticRand = {};
staticRand.rr = [];
staticRand.rand = function(){
    if(staticRand.sttc){
        var rt = staticRand.srr[staticRand.srrIndex];
        staticRand.srrIndex++;
        return rt;
    } else {
        var rnd = Math.random();
        staticRand.rr.push(rnd);
        return rnd;
    }  
    
}
staticRand.srr = [0.8581970701925457,0.10209627007134259,0.8040870034601539,0.180207155412063,0.5762740513309836,0.2633442173246294,0.5042364816181362,0.5409232678357512,0.6914460314437747,0.2748646792024374,0.25745590403676033,0.86387196672149,0.4462839369662106,0.05502662714570761,0.3541200626641512,0.569907589815557,0.25140400789678097,0.4621967179700732,0.9066995526663959,0.39514368236996233,0.7979588727466762,0.7565218480303884,0.374112272169441,0.46710873185656965,0.7221906194463372,0.10852271760813892,0.011601379606872797,0.727271594805643,0.5966140767559409,0.6698438855819404,0.1273383169900626,0.9262338536791503,0.10248407395556569,0.2119331022258848,0.9160150263924152,0.2443979666568339,0.2011829363182187,0.8727068027947098,0.8695976003073156,0.897963885916397,0.8820785726420581,0.12228980264626443,0.3220678260549903,0.7100367117673159,0.891034971922636,0.6698172672186047,0.44264551787637174,0.7105432013049722,0.12580895330756903,0.9614220596849918,0.3030876105185598,0.0174534076359123,0.15287701156921685,0.4257476944476366,0.25693328119814396,0.4259193579200655,0.4227637455333024,0.9865506011992693,0.09671707381494343,0.9029984357766807,0.7240310073830187,0.5950668822042644,0.8562552861403674,0.3375852042809129,0.26943726651370525,0.8278264973778278,0.10091666504740715,0.465609994251281,0.39097922830842435,0.20750634605064988,0.7648644424043596,0.6323332502506673,0.3372972309589386,0.14259970630519092,0.9362133846152574,0.8301699459552765,0.7833205787464976,0.6948267379775643,0.962562239728868,0.5826419549994171,0.16924951551482081,0.5978575772605836,0.1687242176849395,0.14617597591131926,0.3431222136132419,0.5874419559258968,0.4775143223814666,0.21830866253003478,0.1963007035665214,0.8509067320264876,0.9168744250200689,0.1761288712732494,0.5344124541152269,0.0998337350320071,0.07525630737654865,0.6294831428676844,0.004948790883645415,0.399153268430382,0.08631504490040243,0.7207971215248108,0.9779033879749477,0.5290661922190338,0.3865283669438213,0.22687692125327885,0.5214225186500698,0.9046080696862191,0.8401255179196596,0.7767983311787248,0.29130681161768734,0.365411136765033,0.6866310299374163,0.76907301787287,0.4424561355262995,0.32264054869301617,0.11579636624082923,0.6659642660524696,0.17199810314923525,0.46081323199905455,0.7903923164121807,0.4084748215973377,0.387897300766781,0.799466154538095,0.6368770741391927,0.36671937978826463,0.20417656493373215,0.4865891491062939,0.7328633160796016,0.22094116685912013,0.319017797941342,0.903060054872185,0.6922386814840138,0.8291200327221304,0.3370471787638962,0.22419412317685783,0.6437681696843356,0.16501433635130525,0.40479666576720774,0.5987049378454685,0.26675781537778676,0.2699592784047127,0.1486650058068335,0.5407743083778769,0.8496683875564486,0.9402759079821408,0.2641867268830538,0.8712894890923053,0.23534813174046576,0.40384123963303864,0.4009857818018645,0.02902038348838687,0.2953574205748737,0.6029099929146469,0.8430984327569604,0.4359826329164207,0.8431266462430358,0.5744659714400768,0.6408243624027818,0.37991856364533305,0.7364397670608014,0.9936367832124233,0.9311086151283234,0.8008664178196341,0.5098509651143104,0.08884594310075045,0.6878700978122652,0.5555588610004634,0.20449144346639514,0.6277654676232487,0.30061296885833144,0.4064317389857024,0.8192129724193364,0.16128748911432922,0.4903666463214904,0.938913234975189,0.2789624882861972,0.1209637587890029,0.617409888189286,0.2347732954658568,0.24981495179235935,0.9239747996907681,0.010095190024003386,0.3510966671165079,0.932060219347477,0.9088037412147969,0.7706159369554371,0.10800058511085808,0.5451090754941106,0.8152033921796829,0.8692900768946856,0.9568779519759119,0.18762609036639333,0.5455023790709674,0.017135523026809096,0.5045656927395612,0.4669458018615842,0.8308650359977037,0.4086808036081493,0.30270699015818536,0.40480462391860783,0.05537296808324754,0.7796269520185888,0.21255490044131875,0.3972132382914424,0.24561542156152427,0.9897870642598718,0.2276990506798029,0.3278474409598857,0.553108453983441,0.7711065446492285,0.9311603077221662,0.7147259737830609,0.3809873927384615,0.5079625647049397,0.9552280681673437,0.6951318536885083,0.8202037422452122,0.2258989082183689,0.5188108328729868,0.8072472407948226,0.2462010714225471,0.8629819743800908,0.5046076057478786,0.19073448865674436,0.6721155152190477,0.280090213753283,0.12185200629755855,0.5562907042913139,0.9181607291102409,0.818117251386866,0.8103926875628531,0.1855710397940129,0.5846358509734273,0.6420582092832774,0.8039513088297099,0.7516723580192775,0.849207840161398,0.5646564804483205,0.7072858538012952,0.2824425371363759,0.1402750969864428,0.6093629971146584,0.2999890837818384,0.6907027256675065,0.05743328668177128,0.43088148697279394,0.6363354625646025,0.5748244456481189,0.48404700797982514,0.854348611086607,0.5233444853220135,0.42047963780350983,0.9569176260847598,0.34132595523260534,0.7487483059521765,0.13311613514088094,0.831586952554062,0.768859138013795,0.16111431131139398,0.5486863616388291,0.21421231608837843,0.7246258030645549,0.6497877177316695,0.7187326666899025,0.8423099494539201,0.10882475785911083,0.5277936132624745,0.8624342631082982,0.893966622883454,0.17678972845897079,0.5871514866594225,0.7849889730568975,0.6006708501372486,0.5742540629580617,0.36673075822182,0.186699734069407,0.5121068395674229,0.6714359181933105,0.5196996130980551,0.9638358487281948,0.8156067475210875,0.5839683189988136,0.8980571397114545,0.5451063606888056,0.5475262408144772,0.2700550607405603,0.24843592522665858,0.6305619182530791,0.6164337249938399,0.532128174090758,0.6081729442812502,0.10331566515378654,0.5979424463585019,0.450641316594556,0.2365592196583748,0.5227322308346629,0.8164437753148377,0.005420758854597807,0.37364034354686737,0.2415215764194727,0.42193869571201503,0.8545295333024114,0.5034068722743541,0.9280405570752919,0.17828298127278686,0.06080333888530731,0.3960296115837991,0.5944455740973353,0.8209415301680565,0.27844742964953184,0.398938829312101,0.04991802154108882,0.8652380469720811,0.4825791239272803,0.028832553420215845,0.5540110857691616,0.2777408205438405,0.2895073441322893,0.0462637054733932,0.35936695360578597,0.8554966922383755,0.6792044292669743,0.32764784805476665,0.35722939227707684,0.7592405311297625,0.2304281156975776,0.6851255316287279,0.1975831356830895,0.12344700819812715,0.6006628421600908,0.017143980599939823,0.14724861830472946,0.6550030708312988,0.497300406685099,0.5231733499094844,0.9750501422677189,0.8915311428718269,0.875158793060109,0.8829933803062886,0.12420648126862943,0.17531910259276628,0.2327805340755731,0.018838608404621482,0.6456424046773463,0.33338440489023924,0.627987053943798,0.9612497997004539,0.9336854957509786,0.331358888419345,0.9035764222498983,0.33917356049641967,0.2105890631210059,0.8637396243866533,0.20263528521172702,0.9760020228568465,0.7165836098138243,0.3402660605497658,0.09436899400316179,0.13249434158205986,0.35680695017799735,0.8280261431355029,0.5864626115653664,0.14069270784966648,0.9435900817625225,0.6409825060982257,0.759025261271745,0.6151063262950629,0.8920162655413151,0.9062771731987596,0.5443781865760684,0.8633922906592488,0.9765824878122658,0.5202738591469824,0.5047952311579138,0.13813426764681935,0.3572101918980479,0.7760739468503743,0.3307687866035849,0.2643089077901095,0.7925214685965329,0.9466472652275115,0.28455446218140423,0.3120364232454449,0.4983463690150529,0.17847706377506256,0.5656695771031082,0.7590887923724949,0.9882194236852229,0.7216972741298378,0.02850232506170869,0.13805132266134024,0.7605733990203589,0.05430607101880014,0.058259676210582256,0.72819360694848,0.7116562039591372,0.489886989351362,0.8911667801439762,0.2572177539113909,0.923039895715192,0.9342582535464317,0.009799952618777752,0.9865917600691319,0.8180416657123715,0.2021616140846163,0.11063563637435436,0.04137631179764867,0.43440733198076487,0.8310730631928891,0.4666507667861879,0.8333680839277804,0.13573611597530544,0.6734767167363316,0.7771243660245091,0.16985437227413058,0.1776712341234088,0.6964462723117322,0.9307815006468445,0.7233335904311389,0.2889945909846574,0.6904544476419687,0.872002417454496,0.4133404064923525,0.49484455678611994,0.4954372341744602,0.7408528248779476,0.3270646745804697,0.12761587114073336,0.616255069617182,0.18543875264003873,0.6725535134319216,0.36447442579083145,0.5755831708665937,0.07062428491190076,0.5813922502566129,0.9873034772463143,0.8730104982387275,0.7349907855968922,0.0851789410226047,0.0420413080137223,0.7652686079964042,0.13852649717591703,0.9580937642604113,0.8715642341412604,0.16887091239914298,0.8713360188994557,0.34822301752865314,0.8470750104170293,0.8350315594580024,0.494197784923017,0.5539002348668873,0.455726821674034,0.5605668930802494,0.5001159957610071,0.8989732242189348,0.6693736861925572,0.7074727099388838,0.07574235741049051,0.8606546418741345,0.4940804161597043,0.4698445925023407,0.08329096320085227,0.9516150129493326,0.6348528554663062,0.02261281944811344,0.83635019720532,0.1734306865837425,0.9269006464164704,0.6865572282113135,0.11329209641553462,0.6220828357618302,0.20417758938856423,0.6972069658804685,0.01876399083994329,0.5901229893788695,0.04189905850216746,0.5601574659813195,0.5776777013670653,0.8119731287006289,0.767713445937261,0.8256017216481268,0.15890589798800647,0.2047842564061284,0.09365101787261665,0.9899954339489341,0.6009434226434678,0.6502181100659072,0.9095839378423989,0.42414465732872486,0.0761287787463516,0.8219442898407578,0.11808627122081816,0.931713710539043,0.6400071370881051,0.12011752650141716,0.3827718677930534,0.8010488271247596,0.9360794187523425,0.4346484215930104,0.7507858073804528,0.2715512274298817,0.7933292249217629,0.5869123069569468,0.12305483501404524,0.2507110780570656,0.09343861322849989,0.37805494014173746,0.7764503620564938,0.6100997482426465,0.5820803218521178,0.26656134985387325,0.40735103376209736,0.1665307516232133,0.012103428831323981,0.15378492115996778,0.15368894068524241,0.35671633621677756,0.8581040105782449,0.4511645606253296,0.7650335172656924,0.6520148906856775,0.36860021227039397,0.64317831187509,0.3310934226028621,0.779617331456393,0.24384976760484278,0.40429495507851243,0.32571490155532956,0.5911432628054172,0.5298146856948733,0.3592786316294223,0.5962114150170237,0.014866264769807458,0.46188611653633416,0.05514825391583145,0.822344075422734,0.013118223519995809,0.8328125365078449,0.762498825090006,0.6130885898601264,0.809401422040537,0.35342545830644667,0.8390593519434333,0.10541247040964663,0.2097601278219372,0.9753306526690722,0.9624007609672844,0.4544066544622183,0.5562389953993261,0.6864515256602317,0.2672859176527709,0.40175813250243664,0.9777745278552175,0.34894580533728004,0.19061190471984446,0.6769118984229863,0.597506448160857,0.17613043263554573,0.7938678967766464,0.24948306824080646,0.015484251314774156,0.30902898381464183,0.007067869650200009,0.41487818653695285,0.9966476403642446,0.6061870870180428,0.264557087328285,0.7487845511641353,0.18143617594614625,0.3787964938674122,0.2541889953427017,0.43366709956899285,0.7159563123714179,0.8269554888829589,0.16891478653997183,0.25300434161908925,0.34805937367491424,0.44411506317555904,0.45765820844098926,0.8709038784727454,0.5519603383727372,0.7319140201434493,0.7429656132590026,0.8010102431289852,0.3394267235416919,0.573492290917784,0.28299980890005827,0.14064247789792717,0.02249995106831193,0.3982438864186406,0.1526435217820108,0.11632545804604888,0.5168119394220412,0.738679084694013,0.22798146842978895,0.6949246141593903,0.4806380746886134,0.3374862289056182,0.21296041761524975,0.7324523420538753,0.1043306514620781,0.6864622118882835,0.5595486415550113,0.1862091242801398,0.08587855938822031,0.296725028892979,0.8066948517225683,0.7739204871468246,0.0722297397442162,0.1920513128861785,0.8092320705763996,0.6809707889333367,0.8674125568941236,0.1817891972605139,0.4521952890790999,0.25760724558494985,0.05011348309926689,0.7534808930940926,0.516146085690707,0.020741613814607263,0.6473279022611678,0.2136513388250023,0.15676736552268267,0.5564054381102324,0.7160925632342696,0.44030353520065546,0.4119703033939004,0.8620855787303299,0.006378407357260585,0.9522728847805411,0.021069621900096536,0.6939584226347506,0.16001158603467047,0.24337032320909202,0.4486361409071833,0.6814881609752774,0.8983774392399937,0.42761146929115057,0.5751255562063307,0.6296566172968596,0.699280665256083,0.40599561482667923,0.7050770258065313,0.7390200498048216,0.27517993515357375,0.9866339867003262,0.10115029127337039,0.24987343163229525,0.9082395017612725,0.7759627827908844,0.393209291389212,0.4902886878699064,0.4700118631590158,0.2887111019808799,0.3677842060569674,0.6944738540332764,0.43374312459491193,0.02372010354883969,0.0646974011324346,0.6621032897382975,0.9638386629521847,0.06445013009943068,0.3236741558648646,0.41280643665231764,0.09520755708217621,0.7212365937884897,0.34503664169460535,0.6463678134605289,0.08670345530845225,0.48151094280183315,0.5031964413356036,0.12960762344300747,0.260985990986228,0.7196281654760242,0.8359875653404742,0.5365812254603952,0.4344487495254725,0.363273712573573,0.9244648762978613,0.057942572282627225,0.1851752798538655,0.264775394462049,0.953170645982027,0.49816945544444025,0.011300905141979456,0.4685872863046825,0.38810200546868145,0.9985836704727262,0.009401150047779083,0.8489561162423342,0.47823375393636525,0.46570307784713805,0.5417365180328488,0.5737133426591754,0.9641216963063926,0.8495199263561517,0.8518381600733846,0.13140016910620034,0.42295270203612745,0.9473938904702663,0.14686180162243545,0.619330654386431,0.1646909338887781,0.40324589563533664,0.8556278708856553,0.9917639817576855,0.017516669118776917,0.9481214482802898,0.20819289609789848,0.3278821464627981,0.8962048331741244,0.9451409073080868,0.08255237829871476,0.1429484230466187,0.41751825995743275,0.8984084166586399,0.608719319337979,0.7551756789907813,0.06365896412171423,0.9757271001581103,0.6590000970754772,0.3378126865718514,0.9088785906787962,0.4414156835991889,0.8439546292647719,0.35363493324257433,0.7522555477917194,0.318971662549302,0.5176840184722096,0.7578390468843281,0.041577143128961325,0.4486504483502358,0.9496432913001627,0.629082920961082,0.7204809028189629,0.27389498450793326,0.3511199443601072,0.21471262234263122,0.870718743884936,0.06861692294478416,0.3469140233937651,0.9929785011336207,0.2512787156738341,0.21015026653185487,0.47451634891331196,0.46364899445325136,0.735953081632033,0.44309077714569867,0.372537903720513,0.8699878179468215,0.07762494101189077,0.7133686349261552,0.11850804719142616,0.4055283952038735,0.8058041285257787,0.6566340778954327,0.5847945678979158,0.49197785346768796,0.7758466745726764,0.6283260621130466,0.35820654896087945,0.19986228551715612,0.43766204128041863,0.40413156151771545,0.8944270652718842,0.6228339287918061,0.735807269345969,0.83865732466802,0.7535431839060038,0.08452174463309348,0.9880769453011453,0.09389727259986103,0.739260466536507,0.7750843388494104,0.10460003558546305,0.20514652784913778,0.5611994860228151,0.44377580424770713,0.8011832167394459,0.7413037857040763,0.05588099849410355,0.4232125503476709,0.24809494754299521,0.817966683767736,0.6020737851504236,0.2111152505967766,0.5565066284034401,0.707151192240417,0.6313130087219179,0.3370461887679994,0.750858066836372,0.7322616633027792,0.2810487614478916,0.9136567516252398,0.18537734472192824,0.9189921081997454,0.46822954062372446,0.15854051196947694,0.2042443670798093,0.2650154633447528,0.8619966129772365,0.8045457163825631,0.711207018001005,0.14645714941434562,0.7223259843885899,0.7376006261911243,0.5585317097138613,0.5890141990967095,0.48967954819090664,0.3019430977292359,0.043832304421812296,0.44809490046463907,0.07613586750812829,0.8286036965437233,0.2429394698701799,0.27032623277045786,0.8337877064477652,0.19096837705001235,0.4341630754061043,0.10866355570033193,0.7195860932115465,0.46906532905995846,0.7170725336764008,0.7030569510534406,0.8816019310615957,0.2850345603656024,0.24041859013959765,0.2522400983143598,0.14798718690872192,0.4767349506728351,0.24844485172070563,0.10645022499375045,0.3776925806887448,0.2974215275608003,0.6443108089733869,0.9442150117829442,0.7011006064713001,0.6736991377547383,0.04742948058992624,0.07537555741146207,0.28779039927758276,0.8312467893119901,0.9808113120961934,0.9546130334492773,0.46487451530992985,0.036314223194494843,0.31215196987614036,0.5899934484623373,0.9627722331788391,0.8054879379924387,0.6537878951057792,0.16580099309794605,0.32461713068187237,0.3555048182606697,0.9027830341365188,0.05619614967145026,0.3234931693878025,0.7616475268732756,0.484294512309134,0.7161839159671217,0.6051890540402383,0.13254530332051218,0.05686764745041728,0.6557976666372269,0.8073967031668872,0.5605533421039581,0.17996262130327523,0.8380446971859783,0.7941293257754296,0.6860714762005955,0.06005563144572079,0.4328766104299575,0.3721352512948215,0.9206562640611082,0.9120787591673434,0.43576346850022674,0.5406437071505934,0.7232672497630119,0.06491567334160209,0.34244698588736355,0.13303122599609196,0.04537611361593008,0.7713095203507692,0.7628041298594326,0.9392037081997842,0.23433997808024287,0.09010909171774983,0.544328783871606,0.5902036759071052,0.5825268859043717,0.4863539303187281,0.8891897592693567,0.28799967281520367,0.47373241907916963,0.19565282831899822,0.44478971348144114,0.8228351667057723,0.9744224254973233,0.9856834069360048,0.7302202899008989,0.4023369944188744,0.7021366863045841,0.27352495631203055,0.7936509256251156,0.02458783145993948,0.4306582591962069,0.5145276070106775,0.7936180511023849,0.8826299754437059,0.20058436039835215,0.7582940675783902,0.3179081124253571,0.001695933984592557,0.8290040346328169,0.7744988957419991,0.6040469733998179,0.47022677259519696,0.8754413553979248,0.9237813800573349,0.14161962107755244,0.324715802911669,0.6731531042605639,0.4168422934599221,0.7083139014430344,0.7830354049801826,0.8055584474932402,0.788662975654006,0.5095571500714868,0.2756909616291523,0.12379670352675021,0.035399561980739236,0.2785427977796644,0.7831387540791184,0.05576060200110078,0.9254208544734865,0.3048348289448768,0.0024754370097070932,0.27860756404697895,0.1680554081685841,0.6950910431332886,0.2521835546940565,0.5080059163738042,0.477006591623649,0.019136482384055853,0.7325645482633263,0.5837813066318631,0.807782887481153,0.789934054017067,0.6525933824013919,0.4131998852826655,0.6454343355726451,0.888337983051315,0.8120491588488221,0.8998737407382578,0.55547512951307,0.4271056903526187,0.766279777744785,0.3453670034650713,0.53837950527668,0.2229792836587876,0.3939915557857603,0.13791103521361947,0.21369278174825013,0.8512230729684234,0.21940809884108603,0.33023911993950605,0.7684946462977678,0.12041250616312027,0.13447886891663074,0.9596647920552641,0.007533426629379392,0.3792633875273168,0.9431046622339636,0.9245464073028415,0.10164952743798494,0.36409658193588257,0.027573137311264873,0.8906367397867143,0.5089296035002917,0.38440614962019026,0.8132889338303357,0.04120372189208865,0.21474638767540455,0.9933753681834787,0.23060198104940355,0.7933852083515376,0.7846425562165678,0.7331497434061021,0.6016601792071015,0.4500902744475752,0.2455371825490147,0.4013249450363219,0.39784771390259266,0.427106024697423,0.7223262614570558,0.512926806230098,0.8075684977229685,0.7272112749051303,0.07586739608086646,0.16647020098753273,0.943791595287621,0.17905477993190289,0.49434843310154974,0.019807426258921623,0.772373890504241,0.5522115242201835,0.30504540144465864,0.7563235755078495,0.09990627481602132,0.04332530591636896,0.9117332655005157,0.8479003820102662,0.9333703373558819,0.09591572266072035,0.83170923194848,0.5011351660359651,0.23755325796082616,0.8935869198758155,0.5198902324773371,0.7201911518350244,0.9458336974494159,0.5805548385251313,0.5475226049311459,0.44351798039861023,0.08150817360728979,0.34595976839773357,0.47623473475687206,0.5903706699609756,0.327662305906415,0.6112820676062256,0.9263633959926665,0.5377325178124011,0.8138048201799393,0.7033373238518834,0.48505005054175854,0.7805053072515875,0.22532666963525116,0.8427314951550215,0.6389133506454527,0.08969006757251918,0.4774352749809623,0.127780023496598,0.5161213676910847,0.3342548022046685,0.5545410492923111,0.052033643471077085,0.8984141312539577,0.9491444013547152,0.2744328149128705,0.9646142129786313,0.6884295458439738,0.7676664055325091,0.30324150528758764,0.12432442558929324,0.9654308026656508,0.12127264519222081,0.01263043680228293,0.7606088418979198,0.8102739583700895,0.3116098565515131,0.0710883887950331,0.011963575147092342,0.5721404736395925,0.7945889942348003,0.11606465792283416,0.6072392161004245,0.4670251957140863,0.9051065417006612,0.8170636997092515,0.6376436809077859,0.38249980797991157,0.8567717333789915,0.8280262171756476,0.7258634732570499,0.6148284079972655,0.23661188129335642,0.9170587328262627,0.7930622615385801,0.2601279492955655,0.0116257609333843,0.39692981052212417,0.17080218461342156,0.3587145812343806,0.1099365446716547,0.4682319883722812,0.560299537377432,0.27569984807632864,0.7197296437807381,0.5826870386954397,0.9380209369119257,0.4814915272872895,0.2526543657295406,0.813164901919663,0.3556179020088166,0.5483983848243952,0.761675011832267,0.7561201518401504,0.18431173404678702,0.9391512481961399,0.9336368725635111,0.20987728028558195,0.7156615257263184,0.39723412529565394,0.7344648612197489,0.5421853070147336,0.8042543479241431,0.32441655662842095,0.1420091565232724,0.40703151747584343,0.5096837354358286,0.818095340160653,0.2541717083659023,0.6499785084743053,0.14261636743322015,0.09306425717659295,0.5864762833807617,0.2842729976400733,0.8442728866357356,0.9559942453633994,0.4512452755589038,0.977286625187844,0.997983539942652,0.29954663338139653,0.5737757936585695,0.08155449852347374,0.9855765684042126,0.5991995893418789,0.5601686397567391,0.5936488469596952,0.019363322062417865,0.2959384089335799,0.2652071490883827,0.5122566281352192,0.7603921333793551,0.6036364040337503,0.7048190697096288,0.193532353034243,0.31035894132219255,0.17496939026750624,0.73229148844257,0.5842948374338448,0.14833466475829482,0.19137900392524898,0.4924979649949819,0.5644085693638772,0.21632817410863936,0.8340113621670753,0.91593276290223,0.8146276583429426,0.09854491474106908,0.10484896972775459,0.989146276583429426,0.09854491474106908,0.10484896972775459,0.9897041858639568,0.7943042470142245,0.42279925383627415,0.9954564752988517,0.5813507065176964,0.7813379461877048,0.4480944056995213,0.7938518954906613,0.5585068145301193,0.9531815394293517,0.34682941995561123,0.6363885165192187,0.387850257800892,0.3053717853035778,0.33258322812616825,0.24335545161738992,0.8452476286329329,0.06813051062636077,0.4871318591758609,0.7325613957364112,0.20224964385852218,0.038546254858374596,0.08666121703572571,0.6149750743061304,0.12545656762085855,0.5459169126115739,0.3188971746712923,0.6237014934886247,0.6774378044065088,0.849754630587995,0.9542618335690349,0.8062852418515831,0.7319580928888172,0.5565271645318717,0.9918135651387274,0.5614554260391742,0.9607828857842833,0.341316741425544,0.40134441456757486,0.4942779499106109,0.17563664983026683,0.5639223814941943,0.2753156218677759,0.5169094549492002,0.3862706436775625,0.483492742292583,0.2520753883291036,0.42755330610089004,0.34934171801432967,0.05341034987941384,0.0050466659013181925,0.3994048198219389,0.8960669485386461,0.38597293966449797,0.733917934820056,0.8499148054979742,0.6644119811244309,0.8669707325752825,0.6033160225488245,0.8095036228187382,0.16302796779200435,0.6221210367511958,0.12424453161656857,0.7299535288475454,0.14336592331528664,0.986871583852917,0.8740930703934282,0.6010565112810582,0.9182414740789682,0.7126172760035843,0.03905511531047523,0.5695450108032674,0.3323924336582422,0.9711387907154858,0.668547194916755,0.531746196327731,0.16414465429261327,0.17765417927876115,0.4160503309685737,0.23480257857590914,0.5180202452465892,0.28676996659487486,0.20377445267513394,0.005790350958704948,0.7551965562161058,0.3835097758565098,0.9433974854182452,0.7113180223386735,0.276393600506708,0.23922852845862508,0.5712458298075944,0.6164758582599461,0.5852922508493066,0.10017541632987559,0.08414540952071548,0.323239668039605,0.23854264221154153,0.8040365509223193,0.7544447223190218,0.7345737270079553,0.15122705744579434,0.8612562157213688,0.8771813903003931,0.6096391382161528,0.6181172300130129,0.4998743699397892,0.006771756801754236,0.17044481076300144,0.48848164617083967,0.8096710913814604,0.3616213968489319,0.6372357225045562,0.4243330175522715,0.11288746679201722,0.81159005057998,0.22516382881440222,0.5751861985772848,0.6187947608996183,0.31614549132063985,0.24660264025442302,0.6725292457267642,0.7541775188874453,0.1670276967342943,0.6585269970819354,0.6779057318344712,0.08478046348318458,0.28877312620170414,0.8877187909092754,0.838461457984522,0.7529667352791876,0.1406325683929026,0.15353742521256208,0.7980636921711266,0.8500084036495537,0.14611638244241476,0.6965877565089613,0.7799459039233625,0.3404959144536406,0.5973464865237474,0.15463025448843837,0.5583527539856732,0.19583617290481925,0.23251605476252735,0.005749572301283479,0.13582610432058573,0.8824465582147241,0.46218861220404506,0.5249757599085569,0.7270775944925845,0.5574028186965734,0.9531049318611622,0.25534135452471673,0.6691218703053892,0.5789356920868158,0.35739230806939304,0.47811851976439357,0.8888810554053634,0.7092386872973293,0.43491654144600034,0.9852027795277536,0.4939028189983219,0.6466226119082421,0.21672745677642524,0.6881206643301994,0.47063279268331826,0.660390111617744,0.22138791950419545,0.08175005833618343,0.8605643089395016,0.40455544786527753,0.028502455446869135,0.7466490804217756,0.7773362058214843,0.6058687709737569,0.5813713688403368,0.9515447344165295,0.3796229837462306,0.9677647766657174,0.06162328412756324,0.09087879257276654,0.9950190326198936,0.6817055721767247,0.09368259715847671,0.8441676828078926,0.7419477396178991,0.639027492608875,0.1528079730924219,0.20497221453115344,0.7863402748480439,0.07618594169616699,0.4109016596339643,0.45200159307569265,0.9755990831181407,0.39731526281684637,0.13134208088740706,0.5294883267488331,0.8181208739988506,0.74761783471331,0.21485284599475563,0.4906658532563597,0.2514951997436583,0.764529443345964,0.604260299121961,0.8589227655902505,0.7858135723508894,0.8723244862630963,0.713487014407292,0.3615951070096344,0.5407515785191208,0.7240274818614125,0.6334660593420267,0.44681380805559456,0.40111254435032606,0.6898817452602088,0.6805573555175215,0.3058663292322308,0.8941850496921688,0.4827654187101871,0.010155344847589731,0.06452248524874449,0.009507144801318645,0.3070694135967642,0.8279990069568157,0.7361312203574926,0.8449923191219568,0.4655201986897737,0.5072575432714075,0.9438240511808544,0.6467092130333185,0.7362779397517443,0.0009297917131334543,0.5862161521799862,0.8671187590807676,0.3697697618044913,0.10283755115233362,0.9576543259900063,0.915160457836464,0.3502268239390105,0.1520085697993636,0.25298160617239773,0.43718155566602945,0.7056687087751925,0.04007433960214257,0.10937155177816749,0.4811722538433969,0.514797767624259,0.4539020322263241,0.43935008090920746,0.5638026003725827,0.7456452059559524,0.036272674798965454,0.9266606362070888,0.04770240606740117,0.9555852515622973,0.9100279049016535,0.5951173566281796,0.9537331378087401,0.9067323494236916,0.6475115837529302,0.5974497196730226,0.9131915972102433,0.7694806030485779,0.19743069703690708,0.7314013591967523,0.7217193525284529,0.096302728401497,0.022105248412117362,0.6243711868301034,0.5599795142188668,0.812419818714261,0.5457299994304776,0.8857546816579998,0.08120730612426996,0.7990188645198941,0.9078493535052985,0.40081843500956893,0.938992680516094,0.7875777957960963,0.6805444124620408,0.9846151133533567,0.47915199608542025,0.8844243516214192,0.4564952871296555,0.24538297578692436,0.6148293653968722,0.008837481494992971,0.5648601774591953,0.9341673760209233,0.3764284737408161,0.5493342797271907,0.9848436757456511,0.7643134500831366,0.46288531832396984,0.10881868633441627,0.9340555465314537,0.22780742030590773,0.8458683218341321,0.14704732247628272,0.2157392397057265,0.7738389102742076,0.7465836170595139,0.8939174343831837,0.7262304308824241,0.32492995355278254,0.9488010371569544,0.18955955794081092,0.908313954481855,0.874477069824934,0.6435508977156132,0.6518994029611349,0.7556113831233233,0.09190597385168076,0.7302728495560586,0.6867226376198232,0.9860970901791006,0.22384569072164595,0.7147445462178439,0.9746062164194882,0.06815648218616843,0.22030120948329568,0.4927897567395121,0.3580722522456199,0.8617537887766957,0.9269174672663212,0.43610753980465233,0.2365175667218864,0.5427709517534822,0.6092539464589208,0.41488578962162137,0.8857266393024474,0.696214443538338,0.8761453768238425,0.3944430625997484,0.17263947473838925,0.5139348939992487,0.47493547340855,0.5886843157932162,0.8201914667151868,0.2659560057800263,0.6934869433753192,0.5847521584946662,0.8748777769505978,0.29067591903731227,0.23983228346332908,0.6585022620856762,0.8617012465838343,0.8256889111362398,0.7186711102258414,0.9395678932778537,0.6806094774510711,0.37554894434288144,0.23716816981323063,0.8879572199657559,0.8429020633921027,0.8210730669088662,0.7418529244605452,0.5413984665647149,0.3771245013922453,0.8930568192154169,0.07881789281964302,0.32861416856758296,0.5224803823512048,0.24156991229392588,0.1605420270934701,0.6669514130335301,0.029181018704548478,0.9486488164402544,0.5279326064046472,0.3030891155358404,0.06013626093044877,0.9534377551171929,0.9478478976525366,0.8685696010943502,0.30742163583636284,0.41077863960526884,0.21621900354512036,0.0029773134738206863,0.4550717507954687,0.6963527717161924,0.6139871194027364,0.6598113996442407,0.08430375973694026,0.05845382530242205,0.15212666685692966,0.1233856922481209,0.566541351377964,0.9396470484789461,0.8928523249924183,0.26240749936550856,0.9568594717420638,0.8790561151690781,0.3042644637171179,0.9759995087515563,0.6296156723983586,0.3928503538481891,0.4092054117936641,0.3817485168110579,0.8519271726254374,0.5345288040116429,0.8915174051653594,0.4038211600854993,0.09594006231054664,0.14785965764895082,0.6904959981329739,0.45999576873146,0.6693702398333699,0.9577295826748013,0.6066247562412173,0.060773835983127356,0.3063553427346051,0.8769799948204309,0.8998738494701684,0.36448800819925964,0.4298180139157921,0.4133850843645632,0.20800324226729572,0.8329534705262631,0.7685868567787111,0.42146332236006856,0.8700254827272147,0.509497111896053,0.9042551589664072,0.4935814661439508,0.42023301706649363,0.4874485379550606,0.9192915400490165,0.7804011660628021,0.8370048590004444,0.8861983695533127,0.5968789372127503,0.4541648128069937,0.27195969852618873,0.3782903398387134,0.7994400148745626,0.9371357979252934,0.9519089278765023,0.5432406079489738,0.5460259306710213,0.9448269994463772,0.3387454638723284,0.20594151271507144,0.3343890917021781,0.0927441141102463,0.3664290360175073,0.5456940785516053,0.5522593357600272,0.566232139011845,0.5524374165106565,0.19663529214449227,0.938832662301138,0.6635265266522765,0.13817226607352495,0.586492481874302,0.9241760631557554,0.7286760832648724,0.6422863060142845,0.9809014624916017,0.06279349653050303,0.21546922205016017,0.24353757803328335,0.15850823116488755,0.44452609959989786,0.002753893379122019,0.5455025676637888,0.7564462455920875,0.39752746070735157,0.601134680910036,0.249169745715335,0.8034994998015463,0.9288858473300934,0.9002031914424151,0.9554408995900303,0.22005569655448198,0.8366413509938866,0.08378979214467108,0.8368215544614941,0.32197268144227564,0.9575023439247161,0.5365561509970576,0.2833637238945812,0.10090229962952435,0.5229080657009035,0.473029043758288,0.36556125921197236,0.8982017000671476,0.3421493929345161,0.1615339124109596,0.027654391946271062,0.9253498739562929,0.6240852165501565,0.02626585215330124,0.0540312600787729,0.20730391377583146,0.5582803457509726,0.6072853924706578,0.008572927908971906,0.6136221801862121,0.12478267401456833,0.11374988779425621,0.24839741573669016,0.5870262361131608,0.22580016893334687,0.059653919422999024,0.42777874204330146,0.03572097606956959,0.009445956442505121,0.3928424804471433,0.3059719887096435,0.34747361997142434,0.07270096382126212,0.7864108569920063,0.4575096310582012,0.6660184736829251,0.3825779603794217,0.0496928789652884,0.8177232672460377,0.36444335663691163,0.5007320130243897,0.06691450183279812,0.7125223020557314,0.9893579459749162,0.34166742651723325,0.10104178613983095,0.048618605360388756,0.7336091143079102,0.7370245945639908,0.1057931394316256,0.2456827035639435,0.3026553972158581,0.6622622690629214,0.02754724374972284,0.9040641216561198,0.15271500777453184,0.3029726811219007,0.6310952636413276,0.6934325890615582,0.40774684958159924,0.5590735066216439,0.7437799714971334,0.01842414471320808,0.9810020516160876,0.049766573356464505,0.6119865644723177,0.3262467586901039,0.03518448839895427,0.7799608733039349,0.13194938004016876,0.4405789156444371,0.9890670895110816,0.17735991068184376,0.9998298285063356,0.9535590938758105,0.5101629204582423,0.33524296525865793,0.9552690885029733,0.9954600643832237,0.21771459677256644,0.25750623387284577,0.3358731335029006,0.9439266482368112,0.10833750781603158,0.7034158494789153,0.03103230451233685,0.2085773218423128,0.8336881215218455,0.431109219789505,0.17452315893024206,0.8195342135149986,0.6731107076629996,0.5092587159015238,0.3881584967020899,0.543474260950461,0.7106732826214284,0.6177503759972751,0.6029826099984348,0.8150446894578636,0.9577390169724822,0.9957884876057506,0.7949368238914758,0.29865251015871763,0.9270885416772217,0.6946576924528927,0.8658454136457294,0.8849753781687468,0.15961964684538543,0.8380925445817411,0.27639431948773563,0.6230629545170814,0.5823251048568636,0.010184821207076311,0.8590832068584859,0.6175500983372331,0.043809560826048255,0.908692653523758,0.7105689190793782,0.6740370348561555,0.48713034274987876,0.5529649707023054,0.5152114550583065,0.23539521545171738,0.071300562703982,0.3821374687831849,0.5647332880180329,0.8076412042137235,0.9963631704449654,0.1392326238565147,0.05755270877853036,0.9259544601663947,0.5762763130478561,0.9833715932909399,0.3077032966539264,0.7404037485830486,0.6767920670099556,0.8928347686305642,0.9102831399068236,0.24793985253199935,0.3049789674114436,0.7653311095200479,0.39685029070824385,0.7777158454991877,0.5485992191825062,0.7131594088859856,0.9736838121898472,0.7109531257301569,0.38390898355282843,0.45932492753490806,0.4550406951457262,0.9174228410702199,0.9639650238677859,0.296508887084201,0.7056465356145054,0.5826321684289724,0.6097156419418752,0.06950596533715725,0.5155940880067647,0.6985472342930734,0.6420827775727957,0.1842627020087093,0.6982496101409197,0.11262923129834235,0.054128962801769376,0.01962300972081721,0.3037675484083593,0.023104677675291896,0.666402350179851,0.8138266520109028,0.4603852038271725,0.3016659473069012,0.8077147945296019,0.24739423021674156,0.5175200244411826,0.810237328754738,0.5923650760669261,0.17993964604102075,0.7772469948977232,0.05368751450441778,0.9796424412634224,0.5472373499069363,0.18741348944604397,0.8306673890911043,0.7757642313372344,0.9104369184933603,0.7247103250119835,0.6562721249647439,0.009801658801734447,0.6999942243564874,0.6408296758309007,0.5543399357702583,0.5825018770992756,0.8490033433772624,0.12598321889527142,0.8579623068217188,0.7380020646378398,0.9154604347422719,0.7260412001051009,0.4032806768082082,0.5698252914007753,0.45276711601763964,0.6823007634375244,0.886285534594208,0.08727183169685304,0.1436982557643205,0.2206322771962732,0.06620793999172747,0.6691207292024046,0.7353146213572472,0.16242407192476094,0.9364211701322347,0.9484030620660633,0.4832418425939977,0.8082330008037388,0.2203981897328049,0.9994341959245503,0.6464472755324095,0.8026732066646218,0.9831561625469476,0.8158334332983941,0.21407219511456788,0.15025434526614845,0.15023060701787472,0.8536198933143169,0.04674088070169091,0.7875372560229152,0.6409175917506218,0.32142531173303723,0.44700903352349997,0.21766213001683354,0.292214552173391,0.6601258085574955,0.43163186055608094,0.7455864672083408,0.814408564940095,0.21720310067757964,0.5178710275795311,0.005666095996275544,0.030405669007450342,0.27931239432655275,0.9320918873418123,0.3070162460207939,0.8761210357770324,0.8677326492033899,0.4641243659425527,0.5588441065046936,0.786249949131161,0.22305201413109899,0.787504127714783,0.7839185232296586,0.8599994431715459,0.8415240875910968,0.5796766798011959,0.6951902364380658,0.6913883353117853,0.4358703987672925,0.36115723359398544,0.30769383488222957,0.194301248062402,0.722573415376246,0.7000908146146685,0.582203759578988,0.5222494781482965,0.12989614671096206,0.7972182231023908,0.15961162140592933,0.604475578526035,0.0817502720747143,0.9217936070635915,0.2549606605898589,0.3868387844413519,0.005779999541118741,0.015372551744803786,0.08019162737764418,0.8054373650811613,0.013545013265684247,0.12311865529045463,0.06671998929232359,0.28546042065136135,0.5173369823023677,0.7778971174266189,0.6948693327140063,0.9610409406013787,0.9791381114628166,0.04134353017434478,0.32802171213552356,0.010586387477815151,0.4102465470787138,0.3746107837650925,0.15352667681872845,0.5844831445720047,0.1934451947454363,0.11592434509657323,0.4423090680502355,0.21286455844528973,0.43725640093907714,0.2977657343726605,0.07384144910611212,0.6146201032679528,0.6392060371581465,0.25401828112080693,0.2997851478867233,0.524551413487643,0.15351763064973056,0.1839128544088453,0.637045084265992,0.2621212280355394,0.4940421781502664,0.37268457328900695,0.46331104519777,0.434062990359962,0.4660688180010766,0.2211724347434938,0.542316744569689,0.3340682501439005,0.5644725689198822,0.6359768034890294,0.6173346722498536,0.7751570960972458,0.697981514967978,0.11916170688346028,0.9027448929846287,0.5720550757832825,0.3700378274079412,0.5515091265551746,0.1578257151413709,0.12272318545728922,0.8574807844124734,0.8603179915808141,0.6476510404609144,0.024177214363589883,0.7678778667468578,0.02154995664022863,0.4254828691482544,0.6438778059091419,0.3122735128272325,0.5717249014414847,0.48950934363529086,0.7421615421772003,0.37398425629362464,0.023381313309073448,0.05334421433508396,0.7988805619534105,0.1118054804392159,0.46804000437259674,0.21494431234896183,0.8765201054047793,0.9278985511045903,0.6334800391923636,0.6430663904175162,0.31380558642558753,0.24479407840408385,0.42212640191428363,0.4345738017000258,0.004272652789950371,0.49483079882338643,0.8237579718697816,0.06630845065228641,0.16168450098484755,0.087517503881827,0.7513616993092,0.49123853887431324,0.2296470166184008,0.4600558739621192,0.2834712334442884,0.5192834150511771,0.23356953100301325,0.8923903091344982,0.7008309934753925,0.9434073222801089,0.311897719046101,0.05733953649178147,0.7220225532073528,0.34539979393593967,0.8504165140911937,0.33905029809102416,0.5469473721459508,0.6173102604225278,0.12297148094512522,0.16799474321305752,0.97873750096187,0.26787496148608625,0.1482887053862214,0.2666609261650592,0.1684698755852878,0.22002166276797652,0.5716631684917957,0.8605015899520367,0.12291885796003044,0.7478706939145923,0.4821945473086089,0.3043632043991238,0.39886386319994926,0.45388177363201976,0.5464338180609047,0.8905301308259368,0.9350871059577912,0.05724240792915225,0.2925628935918212,0.749505260726437,0.06070504314266145,0.5338006915990263,0.47237509046681225,0.7518035664688796,0.4753052843734622,0.2770428820513189,0.9296052686404437,0.06726987799629569,0.3388413025531918,0.400945856468752,0.7321364735253155,0.883212253684178,0.4301824567373842,0.3892083482351154,0.27235499303787947,0.5398937815334648,0.5032658781856298,0.19148000166751444,0.8917695593554527,0.699655806645751,0.7525734822265804,0.8980950531549752,0.6376918375026435,0.7295185932889581,0.5491731141228229,0.7374067893251777,0.6764053779188544,0.8517036659177393,0.13132960442453623,0.795595888979733,0.256166331237182,0.6816891091875732,0.3300072653219104,0.1573430763091892,0.11448305542580783,0.36217840225435793,0.805472654523328,0.48627558653242886,0.4634312253911048,0.626603961456567,0.9033861663192511,0.35446891305036843,0.10413154121488333,0.02606458542868495,0.563111468218267,0.08333299588412046,0.11703111650422215,0.044543181313201785,0.6406587827950716,0.6530848923139274,0.5030899581033736,0.5286440998315811,0.9350411270279437,0.18954124581068754,0.5318239815533161,0.49446475110016763,0.00025297095999121666,0.8323013086337596,0.27886895718984306,0.3486011845525354,0.7919379421509802,0.6080831689760089,0.781634384766221,0.7532010229770094,0.6556481271982193,0.1436136309057474,0.7758657450322062,0.3676793402992189,0.6694212853908539,0.5352184346411377,0.433297447161749,0.9631339148618281,0.17475660215131938,0.8714018305763602,0.5348505775909871,0.24020961695350707,0.4880267046391964,0.5099750366061926,0.720124180894345,0.03684425144456327,0.2815640408080071,0.7574388224165887,0.4475037092342973,0.6798286952544004,0.08800468035042286,0.8181706352625042,0.6003901411313564,0.40115658030845225,0.6388879450969398,0.9907166652847081,0.7182169873267412,0.5270750755444169,0.7185053171124309,0.20750746596604586,0.81063490989618,0.4068013059441,0.7229103860445321,0.40550083783455193,0.277251515770331,0.9771672403439879,0.997715538367629,0.0018357005901634693,0.2491014830302447,0.7999559387098998,0.8234909693710506,0.2022869475185871,0.41243650554679334,0.7181181348860264,0.6472776613663882,0.7807081146165729,0.6861580156255513,0.9625039368402213,0.9528936648275703,0.952700448455289,0.2555718196090311,0.6181079100351781,0.9587981726508588,0.6220869377721101,0.30051674298010767,0.7318684719502926,0.8819826189428568,0.7757223059888929,0.22765995771624148,0.3620076465886086,0.21232077688910067,0.5165984614286572,0.34986470569856465,0.41881699999794364,0.5167227692436427,0.28950952645391226,0.39168126368895173,0.7511191912926733,0.4875068918336183,0.19650763063691556,0.6901304635684937,0.29385326663032174,0.6259894203394651,0.12141240295022726,0.5212354043032974,0.8778640541713685,0.5739239766262472,0.7280970602296293,0.8099038260988891,0.6804822909180075,0.38756689219735563,0.7868124505039304,0.6553346891887486,0.018853165907785296,0.11198259051889181,0.45705607580021024,0.11329209781251848,0.27924252348020673,0.32782939122989774,0.3127794547472149,0.47571396618150175,0.5434495094232261,0.9441808392293751,0.41828529932536185,0.06303596892394125,0.9620949272066355,0.3206030635628849,0.7589083849452436,0.9466479814145714,0.0660655745305121,0.8741661708336323,0.8778589542489499,0.46321504143998027,0.9716450641863048,0.6971078568603843,0.28097844030708075,0.8582891132682562,0.1244735256768763,0.18727107136510313,0.27309806481935084,0.7035977984778583,0.9348925545345992,0.007784255081787705,0.3455393696203828,0.6486340090632439,0.21334878774359822,0.8595331823453307,0.48125143139623106,0.839241427835077,0.765783725772053,0.11963846231810749,0.983406545361504,0.9230016057845205,0.3002315841149539,0.518151544034481,0.18705178913660347,0.6187593997456133,0.3714755158871412,0.8436160290148109,0.6181937807705253,0.7259836026933044,0.9262694474309683,0.9664936969056726,0.02609076793305576,0.6400745080318302,0.5646927808411419,0.346025750041008,0.1686227808240801,0.6121007658075541,0.42643966316245496,0.07147200661711395,0.851061426801607,0.6247685183770955,0.855548849562183,0.9623179321642965,0.37543869763612747,0.15480307373218238,0.493834015680477,0.4392333112191409,0.34437114582397044,0.950968078803271,0.5788083858788013,0.8327092418912798,0.03814369300380349,0.8039117422886193,0.25885180407203734,0.3843329627998173,0.48888106318190694,0.2581363117787987,0.9826902083586901,0.159886495443061,0.6053318353369832,0.34739784547127783,0.4832299188710749,0.08301220554858446,0.16972164949402213,0.24148577405139804,0.7377367478329688,0.0035359079483896494,0.4746031977701932,0.009314981522038579,0.3784201703965664,0.37502322904765606,0.30024871905334294,0.5744641197379678,0.39560841117054224,0.13972157379612327,0.1609603683464229,0.16678257402963936,0.5198812664020807,0.005503274966031313,0.6153992826584727,0.9795848240610212,0.5885003667790443,0.10298610688187182,0.9704217463731766,0.08164478605613112,0.14175909478217363,0.3901946141850203,0.2457680667284876,0.9395823618397117,0.17610450647771358,0.05281346547417343,0.15229303808882833,0.32825327361933887,0.502642011269927,0.2583586070686579,0.37798688490875065,0.4282885326538235,0.5347776752896607,0.0013385831844061613,0.19771397835575044,0.8148534041829407,0.9867960414849222,0.6672403204720467,0.4875374336261302,0.8701882984023541,0.08293999335728586,0.5350208659656346,0.01772253238596022,0.9575269026681781,0.24257424077950418,0.2418493740260601,0.5892708641476929,0.3505235475022346,0.21939081302843988,0.330051930854097,0.14375613699667156,0.5430483818054199,0.7657407044898719,0.7823449079878628,0.6230360434856266,0.6081266507972032,0.08308007451705635,0.6683781566098332,0.5655579613521695,0.7348466031253338,0.5597571493126452,0.2426347816362977,0.315926211187616,0.30789501359686255,0.3881641977932304,0.06908048526383936,0.9255882757715881,0.09681705082766712,0.7681162003427744,0.01506317756138742,0.43742081546224654,0.5885077875573188,0.25475306808948517,0.1812435337342322,0.661917254794389,0.7201690939255059,0.5671981424093246,0.23486137995496392,0.6057572462595999,0.5239016613923013,0.7373807984404266,0.04202592745423317,0.18033307371661067,0.6640593064948916,0.7552384566515684,0.33382937614805996,0.1626935803797096,0.937121753115207,0.9137627396266907,0.6927103057969362,0.10296429181471467,0.48737895069643855,0.6217074175365269,0.40761580038815737,0.587266196962446,0.5678865960799158,0.7448995299637318,0.7932307375594974,0.7671640887856483,0.1312586918938905,0.09905414143577218,0.5337393812369555,0.6009949217550457,0.05657855956815183,0.0008569327183067799,0.002594328485429287,0.4941144098993391,0.5550300206523389,0.9492487807292491,0.4789804802276194,0.8772115788888186,0.6424415926449001,0.3681961779948324,0.46077172458171844,0.8692123875953257,0.7427561962977052,0.8419092409312725,0.2843646816909313,0.4490468476433307,0.29088817071169615,0.3972791056148708,0.3827727504540235,0.5995038121473044,0.2714975238777697,0.33291144273243845,0.6468662451952696,0.5633239857852459,0.32351491949521005,0.41510670678690076,0.5460825364571065,0.2576432698406279,0.7277128847781569,0.8207613092381507,0.03940286976285279,0.9429486722219735,0.18095511733554304,0.5561952942516655,0.05258445767685771,0.7970777659211308,0.9771518460474908,0.027368192560970783,0.6459777487907559,0.16691293707117438,0.6069344717543572,0.9985358132980764,0.8853927897289395,0.37631014129146934,0.3748842403292656,0.9537661771755666,0.821190987015143,0.6306851203553379,0.6582232804503292,0.8124590907245874,0.7822275371290743,0.33575623482465744,0.650511926272884,0.0635906916577369,0.4827530342154205,0.49976313579827547,0.9475812611635774,0.44445157377049327,0.20129756559617817,0.4620466912165284,0.7559095637407154,0.7548285005614161,0.10999735165387392,0.6940166403073817,0.3697991892695427,0.6122314177919179,0.36459558503702283,0.998444767203182,0.354007103247568,0.9750275120604783,0.35642240731976926,0.3015084359794855,0.293426540447399,0.1288200570270419,0.4945360573474318,0.3972966365981847,0.9972237411420792,0.7784096377436072,0.12364866118878126,0.24792924523353577,0.4582663744222373,0.3873669384047389,0.751578917959705,0.5480660959146917,0.7379496302455664,0.5743418161291629,0.938516199355945,0.4712063083425164,0.674043282167986,0.6294979720842093,0.8689473206177354,0.770969511475414,0.20684317080304027,0.46320577757433057,0.22688916511833668,0.9610251309350133,0.7092148179654032,0.7338879876770079,0.17332328110933304,0.3889062008820474,0.6242310013622046,0.4558030138723552,0.9045789698138833,0.5430236821994185,0.699028454022482,0.502408021595329,0.48230442963540554,0.8847444243729115,0.38233783724717796,0.06772174942307174,0.3177928130608052,0.8574244403280318,0.032657414907589555,0.29477866226807237,0.6600769571959972,0.5261677331291139,0.01843877835199237,0.47800681251101196,0.8426288617774844,0.24553137482143939,0.510734522016719,0.011974891880527139,0.8341685216873884,0.22895382018759847,0.21777237462811172,0.32259030686691403,0.8681659949943423,0.4653923804871738,0.6316665573976934,0.9854867833200842,0.05554460478015244,0.28745809267275035,0.8310232555959374,0.658961795270443,0.8336064114701003,0.4414167609065771,0.9623597427271307,0.44493873650208116,0.6854098679032177,0.7641613651067019,0.660836492665112,0.5982668607030064,0.043129456927999854,0.49566585500724614,0.8669625299517065,0.5562992810737342,0.1258656468708068,0.685116350883618,0.6563729692716151,0.22934750863350928,0.6964026337955147,0.7360460173804313,0.25067812972702086,0.7067620956804603,0.22695467481389642,0.30779255949892104,0.9933274844661355,0.07159595564007759,0.33350157435052097,0.3258819058537483,0.7081203579436988,0.899670155486092,0.9018119357060641,0.5723271826282144,0.10976945934817195,0.18193480744957924,0.7503746026195586,0.04547974024899304,0.12843578588217497,0.38510940060950816,0.533133642282337,0.3884109912905842,0.3839360426645726,0.06642697751522064,0.6181922545656562,0.09106035949662328,0.21727221179753542,0.36179486638866365,0.8876884649507701,0.09202326950617135,0.3462504029739648,0.010086175752803683,0.5626369586680084,0.365622570971027,0.31730662612244487,0.08778770291246474,0.8832753109745681,0.06291747535578907,0.07025906187482178,0.7225844219792634,0.665478891460225,0.7673406803514808,0.5112601853907108,0.8706853648182005,0.7330640582367778,0.23151930095627904,0.5199174326844513,0.23266987595707178,0.6751902818214148,0.9627031357958913,0.43516520340926945,0.5411879485473037,0.17900805943645537,0.05762617941945791,0.8887923015281558,0.6402209636289626,0.5237507389392704,0.40108272270299494,0.29310589050874114,0.604212491074577,0.169806674355641,0.7112132480833679,0.8998025094624609,0.5059109670110047,0.3889734037220478,0.8322352380491793,0.550830400083214,0.8093366913963109,0.5236947180237621,0.12382226018235087,0.1742641895543784,0.4361982555128634,0.49046923336572945,0.8975896642077714,0.7816676332149655,0.18246537307277322,0.1388769254554063,0.4176448634825647,0.9884945272933692,0.08771291701123118,0.9792676672805101,0.586076881736517,0.6304572292137891,0.5497529697604477,0.16569248237647116,0.06506762816570699,0.975260738749057,0.3188099192921072,0.7916601540055126,0.23246808210387826,0.8474427240435034,0.8671939026098698,0.8367068835068494,0.24013736774213612,0.17810299154371023,0.08072485425509512,0.8884621972683817,0.373137817485258,0.10150399943813682,0.6311983759514987,0.9375840944703668,0.060596762457862496,0.35567688662558794,0.24475157773122191,0.5275881059933454,0.902958934661001,0.5197813545819372,0.9104681073222309,0.21099654398858547,0.9239072608761489,0.674886925611645,0.16077294293791056,0.8307184677105397,0.3956861945334822,0.25676621682941914,0.489869536831975,0.1128781195729971,0.03897853707894683,0.21732771350070834,0.5322855059057474,0.006315767532214522,0.5358939827419817,0.7257653945125639,0.9998375901486725,0.3397428593598306,0.1356919901445508,0.9781849498394877,0.5000211459118873,0.20303573575802147,0.030198058346286416,0.5701971747912467,0.5981685449369252,0.2752245981246233,0.08673575124703348,0.6326979845762253,0.4673084032256156,0.4189479020424187,0.1983128464780748,0.15398704446852207,0.17885870533064008,0.9281953095924109,0.945716893998906,0.9655948812142015,0.4871067441999912,0.006903309840708971,0.024780739564448595,0.7422135598026216,0.8717858588788658,0.5939628267660737,0.19481401843950152,0.7944369271863252,0.8499674967024475,0.3783348617143929,0.9365023230202496,0.3330214321613312,0.017306172056123614,0.7214631140232086,0.36631348193623126,0.6298105388414115,0.7081207213923335,0.7753197681158781,0.34799455874599516,0.26535050524398685,0.687644766876474,0.7709159844089299,0.6925192507915199,0.9505280938465148,0.5202907293569297,0.26432547089643776,0.7756599728018045,0.8463293015956879,0.4554097321815789,0.7170974863693118,0.6750984808895737,0.4945601106155664,0.27077399916015565,0.4080433442723006,0.7147365498822182,0.6533729962538928,0.54253034805879,0.12484200904145837,0.9304137674625963,0.1509997493121773,0.8032176508568227,0.09175200178287923,0.5826628168579191,0.4144433483015746,0.9318676986731589,0.44118029181845486,0.01650627376511693,0.6710480754263699,0.7138569394592196,0.9972316715866327,0.2151588632259518,0.3458390827290714,0.2132228626869619,0.6839115433394909,0.09602872049435973,0.9230336325708777,0.40134029230102897,0.8655690979212523,0.6449845284223557,0.3012088460382074,0.07620992814190686,0.3909372224006802,0.3322177408263087,0.5057632008101791,0.6515924243722111,0.4892689927946776,0.23351865401491523,0.7687208678107709,0.7637891275808215,0.0164271283429116,0.46066440106369555,0.1678827335126698,0.19086119253188372];
staticRand.srrIndex = 0;
staticRand.sttc = (whatToDoBart == "this") ? true : false;
/**
 * DATABASE FUNCTIONALITY
 */
vdvw.m = {};
vdvw.m.Record = Class.create({
    initialize: function(id){
        this.id = id;
    }
});
vdvw.m.Entity = Class.create(vdvw.m.Record,{
    initialize: function($super,id,type){
        this.type = type;
        $super(id);
    }
})
vdvw.m.removeSpaces = function(str){
    while(str.charAt(0) == " ")
        str = str.substr(1);
    while(str.charAt(str.length-1)==" ")
        str = str.substr(0,str.length-1);
    return str;
}
vdvw.m.Session = {};
vdvw.m.Session.uid = "-1";
vdvw.m.Session.setUid = function(uid){
    vdvw.m.Session.uid = uid;
}
vdvw.m.Session.getUid = function(){
    return vdvw.m.Session.uid;
}
vdvw.m.Table = Class.create({
    initialize: function(incremental){
        this.records = {};
        if(!(typeof incremental == "undefined")){
            this.incremental = incremental;
        }
    },
    numRecords: function(){
        return new Hash(this.records).values().length;
    },
    select: function(query){
        if(typeof query == "string" || typeof query == "number"){
            return this.records[query];
        }
        return query.limit(query.orderby(query.select(this.records)));
    },
    insert: function(record){
        if(!(record instanceof vdvw.m.Record)){
            //console.log("! not a Record: " + record);
            return;
        }
        this.records[record.id] = record;
    },
    addIncrement: function(obj){
        this.records[this.incremental++] = obj;
    }
});
vdvw.m.AssociationTable = Class.create(vdvw.m.Table,{
    initialize: function($super, from, uniqueFrom, to, uniqueTo, association,incremental){
        this.from = from;
        this.uniqueFrom = uniqueFrom;
        this.to = to;
        this.uniqueTo = uniqueTo;
        this.association = association;
        $super(incremental);
    }
});
vdvw.m.EntityTable = Class.create(vdvw.m.Table,{
    initialize: function($super, type){
        this.type = type;
        $super();
    }
});
vdvw.m.DataBase = Class.create({
    initialize: function(){
        this.associations = {};
        this.entities = {};
    },
    createAssociationTable: function(associatedFrom, association, associatedTo, uniqueFrom, uniqueTo){
        if(typeof uniqueFrom == "undefined"){
            uniqueFrom = false;
        }
        if(typeof uniqueTo == "undefined"){
            uniqueTo = false;
        }
        var tableName = associatedFrom + "_" + association + "_" + associatedTo;
        this.associations[tableName] = new vdvw.m.AssociationTable(
            associatedFrom,
            uniqueFrom,
            associatedTo,
            uniqueTo,
            association
        );
        this.associations['hist_'+tableName] = new vdvw.m.AssociationTable(
            associatedFrom,
            false,
            associatedTo,
            false,
            association,
            0
        );
    },
    createEntityTable: function(entityName){
        this.entities[entityName] = new vdvw.m.EntityTable(entityName);
    },
    hasEntityTable: function(entityTypeName){
        return typeof this.entities[entityTypeName] != "undefined";
    },
    hasRelationTable: function(entityTypeName){
        return typeof this.associations[entityTypeName] != "undefined";
    },
    insertEntity: function(entity){
        if(!(entity instanceof vdvw.m.Entity)){
            //console.log("! not an Entity: " + entity);
            return;
        }
        if(!(this.hasEntityTable(entity.type))){
            this.createEntityTable(entity.type);
        }
        if(typeof this.entities[entity.type].select(entity.id) != "undefined"){
            //console.log('! error inserting: already have a ' + entity.type + ' for id ' + entity.id);
            return;
        }
        this.entities[entity.type].insert(entity);
    },
    insertAssociation: function(obj1, association, obj2){
        // both should be entities
        if(!(obj1 instanceof vdvw.m.Entity && obj2 instanceof vdvw.m.Entity)){
            //console.log('both inserted objects for a relation should be Entities!');
            return;
        }
        var tName = obj1.type + '_' + association + '_' + obj2.type;
        if(!(this.associations.hasOwnProperty(tName))){
            //console.log('no association table named ' + tName + '!');
            return;
        }
        
        // are multiple relations allowed?
        if(this.associations[tName].uniqueFrom){
            // find the record we should copy to history
            for(var recordId in this.associations[tName].records){
                if(this.associations[tName].records[recordId].from == obj1.id){
                    var toCopy = this.associations[tName].records[recordId];
                    delete this.associations[tName].records[recordId];
                    this.moveToHistoryTable(tName, toCopy);
                }
            }
        }
        if(this.associations[tName].uniqueTo){
            // find the record we should copy to history
            for(recordId in this.associations[tName].records){
                if(this.associations[tName].records[recordId].to == obj2.id){
                    //console.log('to do make history copy');
                }
            }
        }
        

        this.associations[tName].records[obj1.id + '_' + obj2.id] = {
            from    : obj1.id  ,
            to      : obj2.id  ,
            __vdvwt : Math.floor(new Date().getTime() / 1000)
        };

    },
    moveToHistoryTable: function(tableName, objectToMove){
        if(this.associations.hasOwnProperty('hist_' + tableName)){
            this.associations['hist_' + tableName].addIncrement(objectToMove);
        }else if(this.entities.hasOwnProperty('hist_' + tableName)){
            this.entities['hist_' + tableName].addIncrement(objectToMove);
        }else{
            //console.log('! no history table for '+tableName);
        }
    },
    table: function(tableName){
        if(this.hasEntityTable(tableName)){
            return this.entities[tableName];
        }
        if(this.hasRelationTable(tableName)){
            return this.associations[tableName];
        }
        //console.log("! error, no table named " + tableName + " in DB");
    }
});
vdvw.m.DataBase.createQuery = function(query){
   // alert('-> test' );
    // PARSE THE QUERY & TURN IT INTO A FUNCTION
    // FORMAT: 
    // where .. is .. , .. is .. [] orderby property (ascending|descending) limit int (one-based)
    
    var split = query.split('limit');
    var limit = "";
    if(split.length > 1){
        limit = split[1];
        query = split[0];
    }
    split = query.split('orderby');
    var orderby = "";
    if(split.length > 1){
        orderby = vdvw.m.removeSpaces(split[1]);
        query = split[0];
    }
    split = query.split('where');
    var where = "";
    if(split.length > 1){
        where = split[1];
        query = split[0];
    }
    if(where != ""){
        var wheres = where.split(',');
        var numWheres = wheres.length;
        var filterConditionsIs = [];
        var iter = 0;
        while(iter<numWheres){
            var wheresplit = wheres[iter].split('is');
            wheresplit[0] = vdvw.m.removeSpaces(wheresplit[0]);
            wheresplit[1] = vdvw.m.removeSpaces(wheresplit[1]);
            filterConditionsIs.push(wheresplit);
            iter++;
        }
    }
    if(orderby != ""){
        var ascending = null;
        var descending = null;
        var random = null;
        var orderbysplit = orderby.split(" ");
        var ascordesc = vdvw.m.removeSpaces(orderbysplit[orderbysplit.length -1]);
        if(ascordesc == "ascending" || ascordesc == "descending" || ascordesc == "random"){
            ascending = ascordesc == "ascending" ? true : null;
            descending = ascordesc == "descending" ? true : null;
            random = ascordesc == "random" ? true : null;
        }else{
            ascending = true;
            if(!orderbysplit.length == 1){
                //console.log("! invalid orderby clause: " + query);
                return;
            }
        }
        var orderbyprop = vdvw.m.removeSpaces(orderbysplit[0]);
    }
    if(limit != ""){
        try{var limitint = parseInt(limit);}catch(err){/*console.log("! invalid limit clause: " + query);*/return;}
        if (limitint < 1){/*console.log("! invalid limit clause: " + query);*/return;}
    }
    // build the functional object
    var ret = {};

    // the select function
    ret.select = function(obj){
        var retarr = [];
        if(typeof filterConditionsIs == "undefined"){
            return new Hash(obj).values();
        }
        if(filterConditionsIs.length == 0){
            return new Hash(obj).values();
        }
        for (var iter = 0, len = filterConditionsIs.length; iter < len; ++iter) {
            var condition = filterConditionsIs[iter];
            var nwfiltarr = [];
            if(iter == 0){
                // we have a vanilla object to filter, convert to hash
                var h = new Hash(obj);
                h.each(function(record) {
                    // the record is validated against the value of the filter property
                    if(record.value[condition[0]] == condition[1]) nwfiltarr.push(record.value);
                });
            }
            // else: this is not the first selection so we alreay have an array w. previously filtered values
            else{
                for (var iter2 = 0, retlen = retarr.length; iter2 < retlen; ++iter2){
                    var filteredrecord = retarr[iter2];
                    if(filteredrecord[condition[0]] == condition[1]){ 
                        nwfiltarr.push(filteredrecord);
                    }
                }
            }
            retarr = nwfiltarr;
        }
        return retarr;
    }
    // the orderby function
    if(!(descending || random)){
        ret.orderby = function(arr){
            if(orderbyprop != ""){
                arr.sort(function(a,b){
                    return a[orderbyprop] - b[orderbyprop];
                });
            }
            return arr;
        };
    }
    if(descending){
        ret.orderby = function(arr){
            if(orderbyprop != ""){
                arr.sort(function(a,b){
                    return b[orderbyprop] - a[orderbyprop];
                });
            }
            return arr;
        }
    }
    if(random){
        ret.orderby = function(arr){
            arr.sort(function(a,b){
                return staticRand.rand() -0.5;
            });
            return arr;
        }
    }
    // the limit function
    ret.limit = function(arr){
        if(typeof limitint == "undefined"){
            return arr;
        }
        if(arr.length < limitint){
            return arr;
        }else{
            return arr.splice(0,limitint);
        }
    };
    return ret;
}
/**
 * PRIMARY DATA -- GOVERNED BY DATABASE DESIGN CONCERNS
 */
xpd.User = Class.create ( vdvw.m.Entity , {
    initialize : function ($super, id, type, screenName, loginName, email){
        if(typeof(id) == "undefined") id = 0;
        if(typeof(type) == "undefined") type = xpd.User.EntityName();
        this.screenName = screenName;
        this.loginName = loginName;
        this.email = email;
        $super(id,type);
    }
})
xpd.User.EntityName = function(){return 'user';};
xpd.Location = Class.create(vdvw.m.Entity ,{
   initialize: function($super, id, type, Ma, Na){
       if(typeof(id) == "undefined") id = 0;
       if(typeof(type) == "undefined") type = xpd.Location.EntityName();
       this.Ma = Ma;
       this.Na = Na;
       $super(id,type);
   } 
});
xpd.Location.EntityName = function(){return 'location';};
xpd.Review = Class.create(vdvw.m.Entity,{
    initialize: function($super, id, type, time, head, content, ownerId){
        if(typeof(id) == "undefined") id = 0;
        if(typeof(type) == "undefined") type = xpd.Review.EntityName();
        this.time = time;
        this.head = head;
        this.content = content;
        this.ownerId = ownerId;
        $super(id,type);
    }
});
xpd.Review.EntityName = function(){return 'review';};
xpd.Comment = Class.create(xpd.Review,{
    initialize: function($super, id, type, time, head, content, ownerId, commentedEntityType, commentedId){
        if(typeof(id) == "undefined") id = 0;
        if(typeof(type) == "undefined") type = xpd.Comment.EntityName();
        this.commentedEntityType = commentedEntityType;
        this.commentedId = commentedId;
        $super(id,type,time,head,content,ownerId);
    }
})
xpd.Comment.EntityName = function(){return 'comment';};
xpd.BookPrint = Class.create(vdvw.m.Entity, {
   initialize: function($super, id, entityName){
       if(typeof(id) == "undefined") id = 0;
       if(typeof(entityName == "undefined")) entityName = xpd.BookPrint.EntityName();
       $super(id, entityName);
   }
});
xpd.BookPrint.EntityName = function() {return "book";};
xpd.Question = Class.create(vdvw.m.Entity, {
   initialize: function($super, id, entityName, question, answer){
       if(typeof(id) == "undefined") id = 0;
       if(typeof(entityName == "undefined")) entityName = xpd.Question.EntityName();
       this.question = question;
       this.answer = answer;
       $super(id, entityName);
   }
});
xpd.Question.EntityName = function() {return "question";};
xpd.Tag = Class.create(vdvw.m.Entity, {
   initialize: function($super, id, entityName, tag, description){
       if(typeof(id) == "undefined") id = 0;
       if(typeof(entityName == "undefined")) entityName = xpd.Tag.EntityName();
       this.tag = tag;
       this.description = description;
       $super(id, entityName);
   }
});
xpd.Tag.EntityName = function() {return "tag";};
/**
 * DATA CONSTANTS
 */
xpd.LOCATION_UTRECHT = function(){return {Ma:52.07272343701226, Na:5.090103268623352};};
xpd.FAKE_DATA = function(){return true;};
xpd.FAKE_LOCATIONS = function(){return [{"Ma":-23.52369978207264,"Na":150.51269543750004},{"Ma":3.0308124240777006,"Na":101.38183606250004},{"Ma":-6.7082536689024455,"Na":107.00683606250004},{"Ma":20.838278088150854,"Na":105.77636731250004},{"Ma":19.683970520086152,"Na":110.34667981250004},{"Ma":26.076520830967986,"Na":127.57324231250004},{"Ma":31.466153972474498,"Na":130.64941418750004},{"Ma":34.48844808659433,"Na":135.48339856250004},{"Ma":34.70549365836125,"Na":113.42285168750004},{"Ma":39.027719074689934,"Na":117.13623059375004},{"Ma":43.73935229722859,"Na":125.22216809375004},{"Ma":34.089061565820266,"Na":108.78662121875004},{"Ma":23.563987405117935,"Na":90.41748059375004},{"Ma":26.667096070833868,"Na":94.59228528125004},{"Ma":26.23430230315135,"Na":87.38525403125004},{"Ma":20.59165240338065,"Na":78.37646496875004},{"Ma":22.593726342599638,"Na":75.65185559375004},{"Ma":26.90247715545007,"Na":75.69580090625004},{"Ma":28.536274778156905,"Na":77.14599621875004},{"Ma":29.382175338154642,"Na":67.87353528125004},{"Ma":30.14512744439023,"Na":66.81884778125004},{"Ma":32.54681342794807,"Na":62.33642590625004},{"Ma":36.6684191610516,"Na":67.08251965625004},{"Ma":41.277806694217176,"Na":69.06005871875004},{"Ma":42.81152196652237,"Na":74.77294934375004},{"Ma":50.233152025545884,"Na":80.22216809375004},{"Ma":54.64841267695635,"Na":55.96435559375004},{"Ma":55.02802228599731,"Na":61.45751965625004},{"Ma":48.603857807824696,"Na":44.45068371875004},{"Ma":41.44272660393337,"Na":44.71435559375004},{"Ma":39.40224457352369,"Na":44.01123059375004},{"Ma":35.532226473333736,"Na":51.52587903125004},{"Ma":30.221102113298873,"Na":47.83447278125004},{"Ma":36.20882333637896,"Na":37.06787121875004},{"Ma":38.23818035687372,"Na":34.03564465625004},{"Ma":41.31082410763875,"Na":36.36474621875004},{"Ma":38.27268877294349,"Na":27.048339968750042},{"Ma":42.098222635150684,"Na":24.587402468750042},{"Ma":43.293200533545054,"Na":21.774902468750042},{"Ma":46.437857103031405,"Na":24.499511843750042},{"Ma":45.798169740608735,"Na":16.018066531250042},{"Ma":53.77468902420912,"Na":27.663574343750042},{"Ma":55.72711025502017,"Na":37.59521496875004},{"Ma":50.98609912340168,"Na":16.721191531250042},{"Ma":47.070122029414094,"Na":9.382324343750042},{"Ma":48.400032696503246,"Na":10.832519656250042},{"Ma":49.553725709286965,"Na":11.140136843750042},{"Ma":52.05249066161152,"Na":8.503418093750042},{"Ma":53.51418470024968,"Na":10.085449343750042},{"Ma":52.42922246199661,"Na":4.768066531250042},{"Ma":50.65294355862569,"Na":6.130371218750042},{"Ma":49.866316924093766,"Na":2.2192384062500423},{"Ma":45.675482386505415,"Na":4.855957156250042},{"Ma":47.100044899490754,"Na":-1.6479490937499577},{"Ma":43.64402606612027,"Na":11.096191531250042},{"Ma":40.847060584397134,"Na":14.172363406250042},{"Ma":41.376808792193266,"Na":2.2192384062500423},{"Ma":40.41349627951517,"Na":-3.6254881562499577},{"Ma":39.36827938250461,"Na":-6.437988156249958},{"Ma":36.774092736412854,"Na":-4.548339718749958},{"Ma":34.56085961565267,"Na":-1.6040037812499577},{"Ma":34.5970417646048,"Na":10.920410281250042},{"Ma":32.06395585045274,"Na":19.885254031250042},{"Ma":31.090574353431638,"Na":29.992675906250042},{"Ma":25.482951447826277,"Na":32.45361340625004},{"Ma":29.688053012071805,"Na":35.00244153125004},{"Ma":33.35806186488714,"Na":35.22216809375004},{"Ma":32.212801323390394,"Na":34.73876965625004},{"Ma":31.840232924325402,"Na":35.26611340625004},{"Ma":32.58384957998449,"Na":43.92333996875004},{"Ma":15.15697400471327,"Na":44.09912121875004},{"Ma":10.574222375042567,"Na":49.81201184375004},{"Ma":5.222246813810009,"Na":30.344238406250042},{"Ma":0.3515605958221139,"Na":9.338379031250042},{"Ma":4.214943442409796,"Na":18.391113406250042},{"Ma":15.623037122212272,"Na":-7.009277218749958},{"Ma":15.029686048065876,"Na":-12.282714718749958},{"Ma":5.178482389126411,"Na":-4.108886593749958},{"Ma":13.410994327926579,"Na":3.9331055937500423},{"Ma":16.930705387518785,"Na":7.932129031250042},{"Ma":28.033198114099154,"Na":-15.402831906249958},{"Ma":-34.052659171298224,"Na":22.983398562500042},{"Ma":-15.665353891469378,"Na":15.600586062500042},{"Ma":-11.221509963945454,"Na":34.23339856250004},{"Ma":70.36309118604991,"Na":100.67871106250004},{"Ma":52.241256334488746,"Na":-69.47753893749996},{"Ma":46.76996864030575,"Na":-91.27441393749996},{"Ma":50.930738213952836,"Na":-118.69628893749996},{"Ma":52.45600957657038,"Na":-104.98535143749996},{"Ma":45.798169740608735,"Na":-83.54003893749996},{"Ma":38.78834559035596,"Na":-92.32910143749996},{"Ma":35.99578563062344,"Na":-86.00097643749996},{"Ma":36.56260027982171,"Na":-77.21191393749996},{"Ma":29.802518167680304,"Na":-82.83691393749996},{"Ma":30.10711814820699,"Na":-89.86816393749996},{"Ma":32.50976199045728,"Na":-96.19628893749996},{"Ma":31.61596619351344,"Na":-103.22753893749996},{"Ma":37.40507398994324,"Na":-108.14941393749996},{"Ma":38.78834559035596,"Na":-116.93847643749996},{"Ma":47.7245447521431,"Na":-109.55566393749996},{"Ma":46.5286349029321,"Na":-96.19628893749996},{"Ma":46.286224126652385,"Na":-103.57910143749996},{"Ma":35.137879366466045,"Na":-113.42285143749996},{"Ma":31.31610164135759,"Na":-107.79785143749996},{"Ma":29.49698785924783,"Na":-102.52441393749996},{"Ma":29.190533095797782,"Na":-97.95410143749996},{"Ma":41.475660426424604,"Na":-100.76660143749996},{"Ma":47.7245447521431,"Na":-107.09472643749996},{"Ma":47.249407162776905,"Na":-111.31347643749996},{"Ma":63.685248214111425,"Na":-150.68847643749996},{"Ma":62.734601015338306,"Na":-111.66503893749996},{"Ma":58.240163702290545,"Na":-155.25878893749996},{"Ma":62.734601015338306,"Na":84.85839856250004},{"Ma":63.84066857592496,"Na":47.59277356250004},{"Ma":65.2014685478741,"Na":124.93652356250004},{"Ma":62.734601015338306,"Na":150.60058606250004},{"Ma":-23.92601275712242,"Na":121.06933606250004},{"Ma":-31.989441581922375,"Na":121.42089856250004},{"Ma":-38.03078545607319,"Na":140.75683606250004},{"Ma":-34.052659171298224,"Na":149.89746106250004},{"Ma":-18.02052737082313,"Na":127.39746106250004},{"Ma":-20.67390498227404,"Na":143.56933606250004},{"Ma":-20.67390498227404,"Na":146.03027356250004},{"Ma":-24.246964279092182,"Na":146.73339856250004},{"Ma":-35.20972139860755,"Na":146.73339856250004},{"Ma":-39.13006000799664,"Na":147.43652356250004},{"Ma":-17.350638087947544,"Na":-39.59472643749996},{"Ma":-21.983801137495732,"Na":-43.11035143749996},{"Ma":-39.40224410706182,"Na":-64.55566393749996},{"Ma":-43.100982655803165,"Na":-72.29003893749996},{"Ma":-26.470572752182967,"Na":-63.14941393749996},{"Ma":-30.486550582482238,"Na":-58.22753893749996},{"Ma":-23.92601275712242,"Na":-68.42285143749996},{"Ma":-15.326571510320104,"Na":-73.69628893749996},{"Ma":1.7136119615841567,"Na":-71.93847643749996},{"Ma":-3.908098580760465,"Na":-60.33691393749996},{"Ma":-12.59745421026273,"Na":-59.63378893749996},{"Ma":-3.5572824252873203,"Na":-68.42285143749996},{"Ma":-5.659718254213169,"Na":-46.27441393749996},{"Ma":-14.64736809187062,"Na":-52.60253893749996},{"Ma":-46.589068875662576,"Na":-67.01660143749996},{"Ma":-54.1881553044599,"Na":-69.47753893749996},{"Ma":64.45384961880734,"Na":-18.149413937499958}];};
xpd.RANDOM_AVERAGE_REVIEWS_PER_BOOK = function(){return 2;};
xpd.RANDOM_AVERAGE_COMMENTS_PER_REVIEW = function(){return 2;};
xpd.Relations = {};
xpd.Relations.isWith = function(){return 'isWith';};
xpd.Relations.has = function(){return 'has';};
xpd.SkipCurrentBookLocations = [];

/**
 * MAPPEDOBJECTS - SECONDARY OBJECTS THAT NEED TO BE FILLED WITH PRIMARY DATA
 */
xpd.Mapped = {};

xpd.Mapped.StateObject = Class.create({
    initialize: function(type, id, timestamp, Ma, Na){
        // an object's entity name in the db
        this.type = type;
        // an object's root id in the db
        this.id = id;
        // the time at which this state started
        this.timestamp = timestamp;
        // the location Ma / lat of the object in this state
        this.Ma = Ma;
        // the location Na / long of the object in this state
        this.Na = Na;
    },
    getIds: function(){
        var table = vdvw.m.DataBase.table(this.type);
        return table.select();
    }
})
xpd.Mapped.User = Class.create(xpd.Mapped.StateObject,{
    initialize: function($super, type, id, loginName, userName){
        this.loginName = loginName;
        this.userName = userName;
        this.id = id;
        this.type = xpd.User.EntityName();
        $super(this.type,id,null,null);
    }
})
xpd.Mapped.BookStop = Class.create(xpd.Mapped.StateObject,{
    initialize: function($super, type, id, bookStateTimestamp, ownerMa, ownerNa, ownerId, ownerName){
        this.ownerId = ownerId;
        this.ownerName = ownerName;
        this.hTime =  xpd.Mappers.convertToHumanReadableLocalTimeString(bookStateTimestamp);
        this.hId = (parseInt(id)+1)+'';
        this.ownerType = xpd.User.EntityName();
        this.type = xpd.User.EntityName();
        $super(this.type, id, bookStateTimestamp, ownerMa, ownerNa);
    }
})
xpd.Mapped.MappedComment = Class.create(xpd.Mapped.StateObject,{
    initialize: function($super, type, id, time, locMa, locNa, ownerId, ownerMa, ownerNa, ownerName, head, content, commentedEntityType, commentedEntityId, commentedEntityHead, tags){
        this.ownerId = ownerId;
        this.ownerName = ownerName;
        this.ownerMa = ownerMa;
        this.ownerNa = ownerNa;
        this.ownerType = xpd.User.EntityName();
        this.hTime = xpd.Mappers.convertToHumanReadableLocalTimeString(time);
        this.head = head;
        this.content = content;
        this.commentedEntityType = commentedEntityType;
        this.commentedEntityId = commentedEntityId;
        this.commentedEntityHead = commentedEntityHead;
        this.writable = vdvw.m.Session.getUid() == this.ownerId;
        this.type = xpd.Comment.EntityName();
        this.tags = tags;
        $super(this.type, id, time, locMa, locNa);
    }
})
xpd.Mapped.MappedReview = Class.create(xpd.Mapped.StateObject, {
    // TODO bad practice to create from another object?
    initialize: function($super, review, ownerLocation, reviewLocation, mappedComments, reviewedBook, tags){
        this.review = review;
        this.reviewedBook = reviewedBook;
        this.ownerLocation = ownerLocation;
        this.reviewLocation = reviewLocation;
        this.mappedComments = mappedComments;
        var ownerId;
        var ownerName;
        var time;
        var head;
        var content;
        this.type = xpd.Review.EntityName();
        var id;
        var ma;
        var na;
        this.tags = tags;
        if(typeof(review) != "undefined"){
            ownerId = review.ownerId;
            ownerName = review.ownerName;
            time = review.time;
            content = review.content;
            head = review.head;
            id = review.id;
        }
        if(typeof(reviewLocation) != "undefined"){
            ma = reviewLocation.Ma;
            na = reviewLocation.Na;
        }
        this.ownerId = ownerId;
        this.ownerName = ownerName;
        this.hTime = xpd.Mappers.convertToHumanReadableLocalTimeString(time);
        this.head = head;
        this.content = content;
        this.ownerType = xpd.User.EntityName();
        this.writable = vdvw.m.Session.getUid() == this.ownerId;
        $super(this.type, id, time, ma, na);
    }
})
/**
 * MAPPER FUNCTIONS COLLECT PRIMARY DATA (FROM DB) AND CREATE COMPOSITE (MAPPED) OBJECTS
 */
xpd.Mappers = {};
xpd.Mappers.getReviewsForTagId = function(id){
    var revAssocTab = xpd.db.table(xpd.Review.EntityName() + "_" + xpd.Relations.has() + "_" + xpd.Tag.EntityName());
    var ret = [];
    if(revAssocTab){
        var q = vdvw.m.DataBase.createQuery("where to is " + id);
        var resultSet = revAssocTab.select(q);
        resultSet.each(function(v,k){
            var revRec = xpd.Mappers.getReviewForId(v.from);
            var mpRev = xpd.Mappers.getMappedReviewForReview(revRec);
            ret.push(mpRev);
        });
    }
    return ret;
}
xpd.Mappers.getCommentsForTagId = function(id){
    var comAssocTab = xpd.db.table(xpd.Comment.EntityName() + "_" + xpd.Relations.has() + "_" + xpd.Tag.EntityName());
    var ret = [];
    if(comAssocTab){
        var q = vdvw.m.DataBase.createQuery("where to is " + id);
        var resultSet = comAssocTab.select(q);
        resultSet.each(function(v,k){
            var comRec = xpd.Mappers.getReviewForId(v.from);
            var mpCom = xpd.Mappers.getMappedReviewForReview(comRec);
            ret.push(mpCom);
        });
    }
    return ret;
}
xpd.Mappers.getRelationOfBookStayWithUser = function(bookId, includeHistoryFalse){
    if(typeof includeHistoryFalse == "undefined"){
        includeHistoryFalse = false;
    }
    var getOwnerIdQ = vdvw.m.DataBase.createQuery('where from is ' + bookId);
    var tName = xpd.BookPrint.EntityName() + '_' + xpd.Relations.isWith() + '_' + xpd.User.EntityName();
    var bookIsWithUserTable = xpd.db.table(tName);
    var current = bookIsWithUserTable.select(getOwnerIdQ);
    if(!includeHistoryFalse){
        return current;
    }
    tName = 'hist_' + tName;
    var hist_bookIsWithUserTable = xpd.db.table(tName);
    var hist = hist_bookIsWithUserTable.select(getOwnerIdQ);
    jQuery.merge(hist,current);
    return hist;
    
}
xpd.Mappers.getUserForId = function(userId){
    var getUserQ = vdvw.m.DataBase.createQuery('where id is ' + userId);
    var u = xpd.db.table(xpd.User.EntityName()).select(getUserQ)[0];
    return new xpd.Mapped.User(u.type,u.id,u.loginName,u.screenName);
}
xpd.Mappers.getReviewsForBookOwner = function(ownerId){
    var getRevsQ = 'where ownerId is ' + ownerId;
    getRevsQ = vdvw.m.DataBase.createQuery(getRevsQ);
    var tName = xpd.Review.EntityName();
    var revTable = xpd.db.table(tName);
    var ret = [];
    if(typeof revTable != "undefined"){
        var revs = revTable.select(getRevsQ);
        for(var iter = 0; iter < revs.length; ++iter){
            var primReview = revs[iter];
            ret.push(xpd.Mappers.getMappedReviewForReview(primReview));
        }
    }
    return ret;
}
xpd.Mappers.getBookStopForUserId = function (userId) {
    var getUserQ = vdvw.m.DataBase.createQuery('where id is ' + userId);
    var primUser = xpd.db.table(xpd.User.EntityName()).select(getUserQ)[0];
    var getBookIdQ = vdvw.m.DataBase.createQuery('where to is ' + userId);
    var tName = xpd.BookPrint.EntityName() + '_' + xpd.Relations.isWith() + '_' + xpd.User.EntityName();
    var bookIsWithUserTable = xpd.db.table(tName);
    var current = bookIsWithUserTable.select(getBookIdQ);
    tName = 'hist_' + tName;
    var hist_bookIsWithUserTable = xpd.db.table(tName);
    var hist = hist_bookIsWithUserTable.select(getBookIdQ);
    jQuery.merge(hist,current);
    if(hist.length){
        var primBook = xpd.db.table(xpd.BookPrint.EntityName()).select(hist[0].from);
        var location = xpd.Mappers.getLocationForUserId(primUser.id);
        return new xpd.Mapped.BookStop(xpd.BookPrint.EntityName(), hist[0].from, hist[0].__vdvwt, location.Ma, location.Na, primUser.id, primUser.screenName);
    }
    return null;
}
/**
 * returns array of xpd.Mapped.BookStop
 */
xpd.Mappers.getTraceForBook = function(bookId){
    // get all stayWith relations for this book, history included
    var bookIsWithUserRecordsUnfiltered = xpd.Mappers.getRelationOfBookStayWithUser(bookId,true);
    var ret = [];
    bookIsWithUserRecordsUnfiltered.each(function(bookstop){
        var getOwnerQ = vdvw.m.DataBase.createQuery('where id is ' + bookstop.to);
        var owner = xpd.db.table(xpd.User.EntityName()).select(getOwnerQ)[0];
        var location = xpd.Mappers.getLocationForUserId(owner.id);
        var mpd = new xpd.Mapped.BookStop(xpd.BookPrint.EntityName(), bookId, bookstop.__vdvwt, location.Ma, location.Na, owner.id, owner.screenName);
        ret.push(mpd);
    });
    return ret;
}
xpd.Mappers.convertToHumanReadableLocalTimeString = function(timestamp){
    if(typeof(timestamp)=='string'){
        timestamp = parseInt(timestamp);
    }
    var dt = new Date(timestamp * 1000);
    var str = dt.getDate() + '-' + (dt.getMonth()+1) + '-' + dt.getFullYear() + ' ' + dt.getHours() + ':' + dt.getMinutes();
    return str;
}
xpd.Mappers.getLocationForUserId = function(userId){
    var getLocIdQ = vdvw.m.DataBase.createQuery('where from is ' + userId);
    var tName2 = xpd.User.EntityName() + '_' + xpd.Relations.has() + '_' + xpd.Location.EntityName();
    var userHasLocationTable = xpd.db.table(tName2);
    var locationId = userHasLocationTable.select(getLocIdQ)[0].to;
    var getLocationQ = vdvw.m.DataBase.createQuery('where id is ' + locationId);
    return xpd.db.table(xpd.Location.EntityName()).select(getLocationQ)[0];
}
xpd.Mappers.getLocationForReviewId = function(reviewId){
    var getLocIdQ = vdvw.m.DataBase.createQuery('where from is ' + reviewId);
    var tName2 = xpd.Review.EntityName() + '_' + xpd.Relations.has() + '_' + xpd.Location.EntityName();
    var rvHasLocationTable = xpd.db.table(tName2);
    var locationId = rvHasLocationTable.select(getLocIdQ)[0].to;
    var getLocationQ = vdvw.m.DataBase.createQuery('where id is ' + locationId);
    return xpd.db.table(xpd.Location.EntityName()).select(getLocationQ)[0];
}
xpd.Mappers.getLocationForCommentId = function(commentId){
    var getLocIdQ = vdvw.m.DataBase.createQuery('where from is ' + commentId);
    var tName2 = xpd.Comment.EntityName() + '_' + xpd.Relations.has() + '_' + xpd.Location.EntityName();
    var cHasLocationTable = xpd.db.table(tName2);
    var locationId = cHasLocationTable.select(getLocIdQ)[0].to;
    var getLocationQ = vdvw.m.DataBase.createQuery('where id is ' + locationId);
    return xpd.db.table(xpd.Location.EntityName()).select(getLocationQ)[0];
}
xpd.Mappers.getMappedCommentsForReviewId = function(reviewId){
    var mappedComments = [];
    var commentsQStr = 'where commentedEntityType is ' + xpd.Review.EntityName() + ', commentedId is ' + reviewId;
    var q = vdvw.m.DataBase.createQuery(commentsQStr);
    var tbl = xpd.db.table(xpd.Comment.EntityName());
    var ret = [];
    if(typeof tbl != "undefined"){
        var comments = tbl.select(q); 
        comments.each(function(comment){
            // create mapped comment
            ret.push(xpd.Mappers.getMappedCommentForComment(comment));
        });
    }
    return ret;
}
xpd.Mappers.getMappedTagsForReviewId = function(reviewId){
    var q = vdvw.m.DataBase.createQuery('where from is '+reviewId);
    var assocTabName = xpd.Review.EntityName() + '_' + xpd.Relations.has() + '_' + xpd.Tag.EntityName();
    var assocTab = xpd.db.table(assocTabName);
    var records = assocTab.select(q);
    var ret = [];
    records.each(function(v,k){
        ret.push(xpd.db.table(xpd.Tag.EntityName()).select(v.to));
    });
    return ret;
}
xpd.Mappers.getMappedTagsForCommentId = function(commentId){
    var q = vdvw.m.DataBase.createQuery('where from is '+commentId);
    var assocTabName = xpd.Comment.EntityName() + '_' + xpd.Relations.has() + '_' + xpd.Tag.EntityName();
    var assocTab = xpd.db.table(assocTabName);
    var records = assocTab.select(q);
    var ret = [];
    records.each(function(v,k){
        ret.push(xpd.db.table(xpd.Tag.EntityName()).select(v.to));
    });
    return ret;
}
xpd.Mappers.getMappedCommentForComment = function(comment){
    var type = comment.type;
    var id = comment.id;
    var tags = xpd.Mappers.getMappedTagsForCommentId(id);
    var time = comment.time;
    // does the comment itself have a location?
    var cloc = xpd.Mappers.getLocationForCommentId(comment.id);
    if(cloc == null || typeof cloc == "undefined"){
        cloc = xpd.Mappers.getLocationForUserId(comment.ownerId);
    }
    var locMa = cloc.Ma;
    var locNa = cloc.Na;
    var ownerId = comment.ownerId;
    var userTab = xpd.db.table(xpd.User.EntityName());
    var ownerName = userTab.select(comment.ownerId).screenName;
    var userHasLocationTab = xpd.db.table(xpd.User.EntityName()+'_'+xpd.Relations.has()+'_'+xpd.Location.EntityName());
    var ownerLocationId = userHasLocationTab.select(vdvw.m.DataBase.createQuery('where from is '+comment.ownerId))[0];
    var ownerLocation = xpd.db.table(xpd.Location.EntityName()).select(ownerLocationId.to);
    var ownerMa = ownerLocation.Ma;
    var ownerNa = ownerLocation.Na;
    var head = comment.head;
    var content = comment.content;
    var commentedEntityType = comment.commentedEntityType;
    var commentedEntityId = comment.commentedId;
    var commentedEntityHead = xpd.db.table(comment.commentedEntityType).select(comment.commentedId).head;
    return new xpd.Mapped.MappedComment(type,id,time,locMa,locNa,ownerId,ownerMa,ownerNa,ownerName,head,content,commentedEntityType,commentedEntityId, commentedEntityHead, tags);
}
xpd.Mappers.getCommentsForUser = function (ownerId) {
    var ret = [];
    var getCommentsQ = vdvw.m.DataBase.createQuery('where ownerId is ' + ownerId);
    var comTab = xpd.db.table(xpd.Comment.EntityName());
    if(typeof comTab != "undefined"){
        var rawComments = comTab.select(getCommentsQ);
        rawComments.each(function(rawComment){
            ret.push(xpd.Mappers.getMappedCommentForComment(rawComment));
        })
    }
    return ret;
}
xpd.Mappers.getMappedReviewForReview = function(review){
    review.ownerName = xpd.db.table(xpd.User.EntityName()).select(review.ownerId).screenName;
    var tags = xpd.Mappers.getMappedTagsForReviewId(review.id);
    var ownerLocation = xpd.Mappers.getLocationForUserId(review.ownerId);
    var reviewLocation = xpd.Mappers.getLocationForReviewId(review.id);
    var mappedComments = xpd.Mappers.getMappedCommentsForReviewId(review.id);
    var reviewedBook = xpd.Mappers.getBookStopForUserId(review.ownerId);
    return new xpd.Mapped.MappedReview(review, ownerLocation, reviewLocation, mappedComments, reviewedBook, tags);
}
xpd.Mappers.getBookAtCurrentLocationForId = function(id){
    var getBookQ = vdvw.m.DataBase.createQuery('where id is ' + id + ' orderby id ascending');   
    var bookArr = xpd.db.table(xpd.BookPrint.EntityName()).select(getBookQ);
    var ret = [];
    // book number [n] is with [mr x] who is at [location Ma, Na]
    bookArr.each(function(bookPrint){
        // get the owner of this book
        var bookIsWithUserRecord = xpd.Mappers.getRelationOfBookStayWithUser(bookPrint.id)[0];
        var bookIsWithUserTime = bookIsWithUserRecord.__vdvwt;
        var ownerId = bookIsWithUserRecord.to;
        var getOwnerQ = vdvw.m.DataBase.createQuery('where id is ' + ownerId);
        var owner = xpd.db.table(xpd.User.EntityName()).select(getOwnerQ)[0];
        // get location of owner
        var getLocIdQ = vdvw.m.DataBase.createQuery('where from is ' + owner.id);
        var tName2 = xpd.User.EntityName() + '_' + xpd.Relations.has() + '_' + xpd.Location.EntityName();
        var userHasLocationTable = xpd.db.table(tName2);
        var locationId = userHasLocationTable.select(getLocIdQ)[0].to;
        var getLocationQ = vdvw.m.DataBase.createQuery('where id is ' + locationId);
        var location = xpd.db.table(xpd.Location.EntityName()).select(getLocationQ)[0];
        // create mapped object
        var mpd = new xpd.Mapped.BookStop(bookPrint.type, bookPrint.id, bookIsWithUserTime, location.Ma, location.Na, owner.id, owner.screenName);
        ret.push(mpd);
    });
    return ret;
}
xpd.Mappers.getBooksAtCurrentLocations = function(){
    var booksTB = xpd.db.table(xpd.BookPrint.EntityName());
    if("undefined" == typeof booksTB){
        alert("no books in the database yet");
        return;
    }
    var getBooksQ = vdvw.m.DataBase.createQuery('orderby id ascending');
    var allBooks = booksTB.select(getBooksQ);
    var ret = [];
    // book number [n] is with [mr x] who is at [location Ma, Na]
    allBooks.each(function(bookPrint){
        // get the owner of this book
        var bookIsWithUserRecord = xpd.Mappers.getRelationOfBookStayWithUser(bookPrint.id)[0];
        if(typeof bookIsWithUserRecord != "undefined"){
            var bookIsWithUserTime = bookIsWithUserRecord.__vdvwt;
            var ownerId = bookIsWithUserRecord.to;
            var getOwnerQ = vdvw.m.DataBase.createQuery('where id is ' + ownerId);
            var owner = xpd.db.table(xpd.User.EntityName()).select(getOwnerQ)[0];
            // get location of owner
            var getLocIdQ = vdvw.m.DataBase.createQuery('where from is ' + owner.id);
            var tName2 = xpd.User.EntityName() + '_' + xpd.Relations.has() + '_' + xpd.Location.EntityName();
            var userHasLocationTable = xpd.db.table(tName2);
            var locationId = userHasLocationTable.select(getLocIdQ)[0].to;
            var getLocationQ = vdvw.m.DataBase.createQuery('where id is ' + locationId);
            var location = xpd.db.table(xpd.Location.EntityName()).select(getLocationQ)[0];
            // create mapped object
            var mpd = new xpd.Mapped.BookStop(bookPrint.type, bookPrint.id, bookIsWithUserTime, location.Ma, location.Na, owner.id, owner.screenName);
            ret.push(mpd);
        }
    });
    return ret;
}
xpd.Mappers.getReviewForId = function(reviewId){
    return xpd.db.table(xpd.Review.EntityName()).select(reviewId);
}
/**
 * VIEW
 */
vdvw.v = {};
/**
 * VIEW CONSTANTS
 */
vdvw.v.Const = {};
vdvw.v.Const.LEGEND_PIC_CROP_RIGHT = function(){return 30;}
vdvw.v.Const.BREADCRUMB_MAX_OPACITY = function(){
	return 1;
};
vdvw.v.Const.BREADCRUMB_MAX_FONTSIZE = function(){
	return 14;
};
vdvw.v.Const.BREADCRUMB_MIN_OPACITY = function(){
	return 0.5;
};
vdvw.v.Const.BREADCRUMB_MIN_FONTSIZE = function(){
	return 12;
};
vdvw.v.Const.MAX_ELEMENTS_IN_BREADCRUMB = function(){return 5;};
vdvw.v.Const.MAX_ELEMENTS_IN_CONTENTPANE = function(){return 20;};

vdvw.v.Const.retrieveCmsPanel = function(){
    return jQuery("#cms-panel");
}

vdvw.v.Const.Map = {};
vdvw.v.Const.MAP = function(){return vdvw.v.Const.Map;};

vdvw.v.Const.Geocoder = {};
vdvw.v.Const.GEOCODER = function(){return vdvw.v.Const.GEOCODER;};

vdvw.v.Const.bookIcon = function(){return 'app/images/site/book_icon.png';}
vdvw.v.Const.stopIcon = function(){return 'app/images/site/stop_icon8.png';}
vdvw.v.Const.stopIconNoLabel = function(){return 'app/images/site/stop_icon9.png';}
vdvw.v.Const.reviewIcon = function(){return 'app/images/site/review.png';}
vdvw.v.Const.commentIcon = function(){return 'app/images/site/comment.png';}
vdvw.v.Const.expodiumIcon = function(){return 'app/images/site/expodiumIcon.png';}
vdvw.v.Const.centerIcon = function(){return 'app/images/site/center_icon.png';}
vdvw.v.Const.expodiumTooltipText = function(){return 'expodium';}
//vdvw.v.Const.getColorsArray = function(){return ['Silver','Gray','Black','Red','Maroon','Yellow','Olive','Lime','Green','Aqua','Teal','Blue','Navy','Fuchsia','Purple'];}
vdvw.v.Const.getColorsArray = function(){return ['Silver','Gray','Black'];}

vdvw.v.Const.RAND_HEADERS = function(){return [
        'Urban farming is cool',
        'Living and leaving',
        'Amazing live discussion',
        'Electricity power house',
        'Labour value',
        'Sharing of knowledge',
        'The potential of autonomy',
        'Negotiation in participation',
        'Small scale initiatives',
        'Forum events',
        'Working concept of the temporary',
        'Creative response',
        'Mediated forces',
        'A trail of smoke',
        'The riots of "67',
        'What work is',
        'Requiem for Detroit',
        'Holding it together',
        'Deconstruction of individualism',
        'Questioning the communal',
        'Relational currencies',
        'Money as debt',
        'Ecology bioethics',
        'Blue collar shirt'
    ];}
vdvw.v.Const.RAND_NAMES = function(){return ["Hank Williams","Pete Blue",'John Denver','Phil Collins','Hank Moody','Michael Jayson','Liz Fondley','Kate Michelson','George Washington','Alanis Morissete','Jim Morrisson','Johnny Walker','Kurt Russel','Minnie Driver','Margaret Tate','Cathelyn Dinky','Dick Masterson','Condoleeza Rice','Rick Astley','George Harrison','Nelson Mandela','Jack Nicholson','Charlie Sheen','Emilio Estevez','Gilberto Gil'];}
vdvw.v.Const.RAND_CONT = function(){return "Do you see any Teletubbies in here? Do you see a slender plastic tag clipped to my shirt with my name printed on it? Do you see a little Asian child with a blank expression on his face sitting outside on a mechanical helicopter that shakes when you put quarters in it? No? Well, that's what you see at a toy store. And you must think you're in a toy store, because you're here shopping for an infant named Jeb. Your bones don't break, mine do. That's clear. Your cells react to bacteria and viruses differently than mine. You don't get sick, I do. That's also clear. But for some reason, you and I react the exact same way to water. We swallow it too fast, we choke. We get some in our lungs, we drown. However unreal it may seem, we are connected, you and I. We're on the same curve, just on opposite ends. The path of the righteous man is beset on all sides by the iniquities of the selfish and the tyranny of evil men. Blessed is he who, in the name of charity and good will, shepherds the weak through the valley of darkness, for he is truly his brother's keeper and the finder of lost children. And I will strike down upon thee with great vengeance and furious anger those who would attempt to poison and destroy My brothers. And you will know My name is the Lord when I lay My vengeance upon thee.";}
vdvw.v.Const.RAND_CONT_COMM = function(){return "Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they haven't seen you in a year. And the good thing about dogs... is they got different dogs for different people. Like pit bulls. The dog of dogs. Pit bull can be the right man's best friend... or the wrong man's worst enemy. You going to give me a dog for a pet, give me a pit bull. Give me... Raoul. Right, Omar? Give me Raoul.";}

vdvw.v.Const.bookTitle = function(book_id, book_owner_name){
    return 'Book number ' + (parseInt(book_id) + ((fakeItBart == "none") ? 0 : 1 )) + ' / ' + book_owner_name + '.';
}
vdvw.v.Const.reviewTitle = function(book_id, book_owner_name){
    return book_owner_name + ' added material to book number ' + (parseInt(book_id)+1) + '.';
}
vdvw.v.Const.iconForBook = function(book_id){
    return 'app/images/site/books/book_icon' + (parseInt(book_id) + ((fakeItBart == "none") ? 0 : 1 )) + '.png';
}
vdvw.v.Const.iconForBookWhite = function(book_id){
    return 'app/images/site/books/book_icon_white' + (parseInt(book_id) + ((fakeItBart == "none") ? 0 : 1 )) + '.png';
}

vdvw.v.Const.eurasia={};
vdvw.v.Const.greenland={};
vdvw.v.Const.america={};
vdvw.v.Const.namerica={};
vdvw.v.Const.africa={};
vdvw.v.Const.australia={};
/**
 * VIEW ADJUSTMENTS
 */
vdvw.v.adjust = {};
vdvw.v.adjust.aboutBlockDimensions = function(){
	var legendPicCssWidthSTR = jQuery('#legend-pic').css('width');
	var legendPicCssWidthInt = parseInt(legendPicCssWidthSTR.substring(0,legendPicCssWidthSTR.length-2));
	var legendPicCssWidthAfterCrop = legendPicCssWidthInt - vdvw.v.Const.LEGEND_PIC_CROP_RIGHT();
	jQuery('#about-text').css('width', jQuery(window).width() - legendPicCssWidthAfterCrop);
}
/**
 * VIEW FACTORIES
 */ 
vdvw.v.FProjectTitle = function(){
    var div = jQuery('<div/>',{
        id:'project-title'
    });
    div.append(jQuery('<img/>', {
        src: vdvw.v.Const.expodiumIcon()
    }));
    div.append(jQuery('<h1>URBAN TRANSLATIONS [beta]</h1>'));
    return div;
}
vdvw.v.FBreadCrumbWrapper = function(){
    var div = jQuery('<div/>',{
        id: 'breadcrumb-wrapper'
    });
    var bct = div.append(jQuery('<div/>',{
        id: 'breadcrumb-toggle'
    }).append('history'));
    div.append(jQuery('<div/>',{
        id: 'breadcrumb'
    }));
    return div;
}
vdvw.v.FContentPaneWrapper = function (){
    var mdiv = jQuery('<div/>',{
        id: 'contentpane-container'
    });
    var bct = mdiv.append(jQuery('<div/>',{
        id: 'contentpane-toggle'
    }).append('hide >>'));
    var div = mdiv.append(jQuery('<div/>',{
        id: 'contentpane-wrapper'
    }).append(jQuery('<div/>',{
        id: 'contentpane'
    })));
    
    return mdiv;
}
vdvw.v.FAboutLink = function(){
    /*var div = jQuery('<div/>',{
        id: 'about-link'
    });
    div.append('about');
    return div;*/
}
vdvw.v.FAboutText = function(){
    var aboutText = "<h3>ABOUT</h3><p><strong><i>Urban translations</i></strong> is an expanding web platform initiated by <a href='http://expodium.nl' target='_blank'>EXPODIUM</a> to map responses from a broad set of individuals engaged in art related practices within urban transition areas. The domain hosts reflections on matters of art in relation to urban development and socially engaged practices worldwide. </br>Twenty copies of Expodium’s ‘DETROIT: BACK TO THE FUTURE/ARCHIVE OF IMPRESSIONS’ (DBA_IDURLL) publication were sent to experts globally, inviting them to comment on the subjects that are touched/evoked in the book. Each contributor is encouraged to post thoughts and reflections, comment on additions of other contributors and - last but not least - pass the publication to a member of his/her network. </br>Urban Translations is a transparent ‘think-tank’ and visitors of the website are offered the chance to follow the route of each publication and trace all the additions (posts) and comments that are made. </br>Did you receive a book? Click on the 'I received a book. Now what?'-link at the top right position of this window.</p>";
    var div = jQuery('<div/>',{
        id: 'about-text'
    });
    var closeBtn = jQuery('<div/>',{
        id: 'close-button'
    }).append('<img src="app/images/site/close.png"/>');
    div.append(closeBtn);
    div.append(aboutText);
	
    return div;
}
//ernst
vdvw.v.FFAQLink = function(){
    
}
//ernst
vdvw.v.FFAQText = function(){
    var faqText = 
	'<h3><a class="vdvw-faq-question" href="#" id="whatIsTheDetroitPublication">1. What is  the "DETROIT: BACK TO THE FUTURE/ARCHIVE OF IMPRESSIONS" publication?</a></h3>' +
	'<div>' +
		"DETROIT: BACK TO THE FUTURE/ARCHIVE OF IMPRESSIONS is a 179 pages booklet, printed in a limited edition of 30 copies. Every copy is numbered and signed. A plastic screw on the top left side binds all pages together, inviting readers to 'twist' instead of 'flip', suggesting various starting points.The publication is designed to give an inside to the 'journey' of Expodium's artists Nikos Doulos and Joao Evangelista in Detroit. It is set to give a mere impression of Detroit’s complexity and highlight notions, embedded within its current state. Notions such as mutualism and the sense of taking care, preservation and the sense of belonging, agency, necessity and the trust in the outcome of a creative mind." +
	'</div>' +
	'<h3><a class="vdvw-faq-question" href="#" id="whatIsTheGoalOfThisWebsite">2. What is the goal of this website?</a></h3>' +
	'<div class="faq">' +
		"<p>urban translations aims to build an extensive map of information and critical reactions on all inspiring 'things' that are happening in the city. All information is visible to everyone who accesses the website and can function as an library  of reflections for researchers, artists, corporations and decisions makers. </br>In addition urban translations aims to build an interactive community of experts, that has the potential to grow beyond the boarders of the website.</br>Expodium wishes to see the platform function as a habitat for fascinating people, doing and researching fascinating things that are happening in the city and form professional bonds between them.</p>" +
	'</div>' +
	'<h3><a class="vdvw-faq-question" href="#" id="whatCanIDoHere">3. What can I do here?</a></h3>' +
	'<div class="faq">' +
		'<p>that all depends on whether you have this book: </p><p><img src="app/images/site/thebook.png"/> </p><p>If you do, you are one of the chosen ones. You can add your views on the book on this website via <a href="#q1">reviews</a> and comments(link)	</br>if you do not have a book, you can track the journey of each of the twenty copies of the book. That is, see where each book has been, what opinions, comments and other material have been added to it as a response, and see where each book is right now.</p>' +
	'</div>' +
	'<h3><a class="vdvw-faq-question" href="#" id="whatIsABook">4. What is a book?</a></h3>' +
	'<div class="faq">' +
		"<p> A <i>book</i> is an actual copy of the 'DETROIT: BACK TO THE FUTURE/ARCHIVE OF IMPRESSIONS' publication. It is indicated on the website with a circle and a number. Its place on the map points out where the book is now.</p>" +
	'</div>'+
	'<h3><a class="vdvw-faq-question" href="#" id="whatIsAReview">5. What is a review?</a></h3>' +
	'<div class="faq">' +
		"<p> A <i>review</i> is a direct response to the matters touched/evoked in the book. It is the first contribution added under the name of a current book owner in the form of a post/article <i>(reviewer)</i>.</p>" +
	'</div>'+
	'<h3><a class="vdvw-faq-question" href="#" id="whatIsAReviewer">6. What is a reviewer?</a></h3>' +
	'<div class="faq">' +
		"<p> A <i>reviewer</i> is a current  or previous owner of a <i>book</i>. A <i>reviewer</i> is registered in the <i>'urban translations'</i> database (login in account) which enables him/her to issue a <i>review</i> and comment on other <i>reviews</i>.</p>" +
	'</div>'+
	'<h3><a class="vdvw-faq-question" href="#" id="whatIsAComment">7. What is a comment?</a></h3>' +
	'<div class="faq">' +
		"<p> Comment is an additional note on a review. All reviewers are allowed to place comments to all reviews. A reviewer can place a comment only after he/she has published a review of their own.</p>" +
	'</div>'+
	'<h3><a class="vdvw-faq-question" href="#" id="howCanIAddAReview">8. How can I add a review?</a></h3>' +
	'<div class="faq">' +
		"<p> There is a button for that in the top right corner of the screen</p>" +
	'</div>'+
        '<h3><a class="vdvw-faq-question" href="#" id="howCanIAddAComment">9. How can I add a comment?</a></h3>' +
	'<div class="faq">' +
		"<p> Select the review you would like to comment on. You will find the button 'add comment' below the title of the review.</p>" +
	'</div>'+
        '<h3><a class="vdvw-faq-question" href="#" id="howCanIEditMyReview">10. How can I edit my reviews/comments?</a></h3>' +
	'<div class="faq">' +
		"<p> You can't (yet). We're adding this feature in the coming weeks. For now, you'll have to be content with what you posted, or delete it and start over.</p>" +
	'</div>' + 
        '<h3><a class="vdvw-faq-question" href="#" id="whatAboutPrivacy">11. What about my privacy?</a></h3>' + 
        '<div class="faq">' +
                "<p>You can submit two names, a login name and a user name. The login name will never be known to others. Your email address will only be used to send you an activation or password reset email at the moment you require us to do so, and for nothing else. You are free to choose a user name which will appear with the material that you post when you are logged in. We also ask you to submit your location. This is important because our site is about urban development situations on the ground and we like to know how our expertise network is located. However if you do not want do disclose your detailed address it will be no problem when you submit only the name of your locality or area.</p>" +
        '</div>' + 
        '<h3><a class="vdvw-faq-question" href="#" id="safariUsersVersionAlert">12. Safari users read this please.</a></h3>' + 
        '<div class="faq">' +
                '<p>If you use the Safari web browser, click the "About Safari" menu item in the Safari menu. You will see your version number there. Versions 5.1.4 or 5.1.5 have serious accuracy issues so you will not be able to login once you created your account. For more info <a href="http://en.wikipedia.org/wiki/Safari_version_history">see wikipedia</a></p>' +
        '</div>';
    
    
    var wrapdiv = jQuery('<div/>',{
        id: 'faq-wrap'
    });
    var div = jQuery('<div/>',{
        id: 'faq-text'
    });
    var closeBtn = jQuery('<div/>',{
        id: 'close-faq'
    }).append('<h3>FAQ</h3><img src="app/images/site/close.png"/>');
    
    div.append(faqText);
    wrapdiv.append(closeBtn);
    wrapdiv.append(div);
    return wrapdiv;
}
vdvw.v.FCover = function(){
    var div = jQuery('<div/>',{
        id: 'cover'
    });
    return div;
}
vdvw.v.FCredits = function(){
    var div = jQuery('<div/>',{
        id: 'credits'
    });
    div.append('<a href="http://seriousness.nl" target="_blank">created by Adeptive & Seriousness</a>');
    return div;
}
vdvw.v.FLegendPic = function(){
    var div = jQuery('<div/>',{
        id: 'legend-pic'
    });
    div.append(jQuery('<img/>',{
        src: 'app/images/site/legend5.png'
    }));
    return div;
}
vdvw.v.FLoginWrapper = function(){
    var div = jQuery('<div/>',{
        id: 'login-wrapper'
    });
    var bcw = div.append(jQuery('<div/>',{
        id: 'login-link'
    }).append('login'));
    var bcs = div.append(jQuery('<div/>',{
        id: 'logout-link'
    }).append('logout'));
    var bcw = div.append(jQuery('<div/>',{
        id: 'login-name'
    }).append('logged in as '));
    var bcd = div.append(jQuery('<div/>',{
        id: 'add-review-button'
    }).append('add review'));
    var bct = div.append(jQuery('<div/>',{
        id: 'now-what'
    }).append('I received a book. Now what?'));
    var bcy = div.append(jQuery('<div/>',{
        id: 'faq-link'
    }).append('FAQ'));
     var abt = div.append(jQuery('<div/>',{
        id: 'about-link'
    }).append('about'));
    var cms = div.append(jQuery('<div/>',{
        id: 'cms-link'
    }).append('cms'));
    var tags = div.append(jQuery('<div/>',{
        id: 'tags-link'
    }).append('tags'));
   
    return div;
}
vdvw.v.FMapCanvas = function(){
    return jQuery('<div/>', {
        id: 'map_canvas'
    });
}
/**
 * VIEW INITIALIZERS
 */
vdvw.v.initContinents = function(){
    var abstractEurasiaCoordinates = [
			 new google.maps.LatLng( 13.923403897723347, 44.296875),
			 new google.maps.LatLng( 31.653381399664, 34.1015625),
			 new google.maps.LatLng( 36.03133177633187, 34.1015625),
			 new google.maps.LatLng( 42.032974332441405, 17.578125),
			 new google.maps.LatLng( 42.81152174509788, 5.625),
			 new google.maps.LatLng( 41.50857729743935, 1.40625),
			 new google.maps.LatLng( 37.16031654673677, -2.4609375),
			 new google.maps.LatLng( 37.16031654673677, -9.84375),
			 new google.maps.LatLng( 43.58039085560784, -8.7890625),
			 new google.maps.LatLng( 48.574789910928864, -5.09765625),
			 new google.maps.LatLng( 54.059387886623576, 8.4375),
			 new google.maps.LatLng( 62.34960927573042, 4.921875),
			 
			 new google.maps.LatLng( 69.03714171275197, 15.99609375),
			 new google.maps.LatLng( 71.30079291637452, 26.54296875),
			 new google.maps.LatLng( 67.474922384787, 41.66015625),
			 new google.maps.LatLng( 77.69287033641928, 103.53515625),
			 new google.maps.LatLng( 66.72254132270652, -170.68359375),
			 new google.maps.LatLng( 58.44773280389084, 141.6796875),
			 new google.maps.LatLng( 23.241346102386135, 115.6640625),
			 new google.maps.LatLng( 18.812717856407776, 106.69921875),
			 new google.maps.LatLng( 11.6952727330294, 109.51171875),
			
			 new google.maps.LatLng( 7.710991655433229, 101.6015625),
			 new google.maps.LatLng( 22.43134015636061, 91.23046875),
			 new google.maps.LatLng( 15.284185114076445, 80.15625),
			 new google.maps.LatLng( 8.233237111274565, 78.046875),
			 new google.maps.LatLng( 21.125497636606276, 71.89453125),
			 
			 new google.maps.LatLng( 25.3241665257384, 65.56640625),
			 new google.maps.LatLng( 20.632784250388028, 58.7109375)
		];
    vdvw.v.Const.eurasia=new google.maps.Polygon({
			clickable: false,
                        paths: abstractEurasiaCoordinates,
			strokeColor: "#7692AD",
			strokeOpacity: 1.0,
			strokeWeight: 1,
			fillColor: "#87A6CC",
			fillOpacity: 1.0,
			zIndex: -990
		});
    var abstractGreenlandCoordinates = [
			 new google.maps.LatLng( 78.34941069014629, -73.4765625),
			 new google.maps.LatLng( 82.07002819448266, -60.1171875),
			 new google.maps.LatLng( 83.63810565804015, -32.6953125),
			 new google.maps.LatLng( 81.5182718765338, -11.953125),
			 new google.maps.LatLng( 69.77895177646761, -22.5),
			 new google.maps.LatLng( 65.07213008560697, -39.7265625),
			 new google.maps.LatLng( 58.81374171570781, -44.6484375),
			
			 new google.maps.LatLng( 66.51326044311185, -55.546875),
			 new google.maps.LatLng( 75.84516854027044, -59.4140625),
			 new google.maps.LatLng( 76.10079606754579, -71.015625)
		];
    vdvw.v.Const.greenland=new google.maps.Polygon({
			clickable: false,
                        paths: abstractGreenlandCoordinates,
			strokeColor: "#7692AD",
			strokeOpacity: 1.0,
			strokeWeight: 1,
			fillColor: "#87A6CC",
			fillOpacity: 1.0,
			zIndex: -990
		});
                
    var abstractNAmericaCoordinates = [
			 new google.maps.LatLng( 9.449061826881419, -76.640625),
			 new google.maps.LatLng( 25.48295117535531, -97.3828125),
			 new google.maps.LatLng( 47.279229002570816, -54.84375),
			 new google.maps.LatLng( 60.23981116999892, -64.6875),
			 new google.maps.LatLng( 67.20403234340081, -61.5234375),
			 new google.maps.LatLng( 73.82482034613932, -78.3984375),
			 new google.maps.LatLng( 82.30889251821553, -61.875),
			
			 new google.maps.LatLng( 83.15311098437887, -71.3671875),
			 new google.maps.LatLng( 76.26869465080624, -124.1015625),
			 new google.maps.LatLng( 70.37785394109224, -128.671875),
			 new google.maps.LatLng( 71.41317683396566, -158.203125),
			 new google.maps.LatLng( 57.136239319177434, -163.4765625),
			 new google.maps.LatLng( 59.355596110016315, -142.03125),
			 new google.maps.LatLng( 47.754097979680026, -125.15625),
			 new google.maps.LatLng( 33.7243396617476, -121.2890625),
			 new google.maps.LatLng( 19.31114335506464, -104.0625)
		];            
    
    vdvw.v.Const.namerica=new google.maps.Polygon({
			clickable: false,
                        paths: abstractNAmericaCoordinates,
			strokeColor: "#7692AD",
			strokeOpacity: 1.0,
			strokeWeight: 1,
			fillColor: "#87A6CC",
			fillOpacity: 1.0,
			zIndex: -990
		});
            var abstractAmericaCoordinates = [
			 new google.maps.LatLng( -55.77657301866769, -72.0703125),
			 new google.maps.LatLng( -5.615985819155327, -33.3984375),
			 new google.maps.LatLng( 9.795677582829743, -61.171875),
			 new google.maps.LatLng( 9.449061826881419, -76.640625),
			 new google.maps.LatLng( -5.266007882805498, -82.265625),
			 new google.maps.LatLng( -16.63619187839765, -76.2890625),
			 new google.maps.LatLng( -17.978733095556155, -71.015625)
		];    
    vdvw.v.Const.america=new google.maps.Polygon({
			clickable: false,
                        paths: abstractAmericaCoordinates,
			strokeColor: "#7692AD",
			strokeOpacity: 1.0,
			strokeWeight: 1,
			fillColor: "#87A6CC",
			fillOpacity: 1.0,
			zIndex: -990
		});
               var abstractAfricaCoordinates = [
			 new google.maps.LatLng(35.17380831799959, -6.6796875),
			 new google.maps.LatLng(15.623036831528264, -20.390625),
			 new google.maps.LatLng(4.915832801313164, -10.1953125),
			 new google.maps.LatLng(3.8642546157214084, 6.328125),
			 new google.maps.LatLng(-33.72433966174759, 16.875),
			 new google.maps.LatLng(-33.72433966174759, 28.4765625),
			 new google.maps.LatLng(11.523087506868512, 50.9765625),
			 new google.maps.LatLng(10.487811882056683, 43.2421875),
			 new google.maps.LatLng(31.052933985705163, 30.9375),
			 new google.maps.LatLng(35.17380831799959, -6.6796875)
		];
    vdvw.v.Const.africa=new google.maps.Polygon({
			clickable: false,
                        paths: abstractAfricaCoordinates,
			strokeColor: "#7692AD",
			strokeOpacity: 1.0,
			strokeWeight: 1,
			fillColor: "#87A6CC",
			fillOpacity: 1.0,
			zIndex: -990
		});
              var abstractAustraliaCoordinates = [
			 new google.maps.LatLng( -10.660607953624762, 142.03125),
			 new google.maps.LatLng( -18.47960905583197, 146.25),
			 new google.maps.LatLng( -24.5271348225978, 152.9296875),
			 new google.maps.LatLng( -37.43997405227057, 149.765625),
			 new google.maps.LatLng( -39.232253141714885, 145.01953125),
			 new google.maps.LatLng( -37.71859032558814, 139.5703125),
			 new google.maps.LatLng( -31.802892586706747, 130.95703125),
			 new google.maps.LatLng( -35.17380831799957, 116.89453125),
			 new google.maps.LatLng( -33.87041555094183, 114.78515625),
			 new google.maps.LatLng( -22.10599879975055, 113.37890625),
			 new google.maps.LatLng( -19.145168196205283, 120.5859375),
			 new google.maps.LatLng( -13.581920900545844, 126.9140625),
			 
			 new google.maps.LatLng( -14.264383087562635, 129.375),
			 new google.maps.LatLng( -10.83330598364249, 131.484375),
			 new google.maps.LatLng( -12.039320557540572, 136.40625),
			 new google.maps.LatLng( -15.114552871944102, 135.3515625),
			 new google.maps.LatLng( -17.14079039331664, 140.09765625)
			 
		];  
    vdvw.v.Const.australia= new google.maps.Polygon({
			clickable: false,
                        paths: abstractAustraliaCoordinates,
			strokeColor: "#7692AD",
			strokeOpacity: 1.0,
			strokeWeight: 1,
			fillColor: "#87A6CC",
			fillOpacity: 1.0,
			zIndex: -990
		});
}
vdvw.v.clearAbstractMap = function(){
    vdvw.v.Const.eurasia.setMap(null);
    vdvw.v.Const.greenland.setMap(null);
    vdvw.v.Const.america.setMap(null);
    vdvw.v.Const.namerica.setMap(null);
    vdvw.v.Const.africa.setMap(null);
    vdvw.v.Const.australia.setMap(null);
}
vdvw.v.showAbstractMap = function(){
    vdvw.v.Const.eurasia.setMap(vdvw.v.Const.Map);
    vdvw.v.Const.greenland.setMap(vdvw.v.Const.Map);
    vdvw.v.Const.america.setMap(vdvw.v.Const.Map);
    vdvw.v.Const.namerica.setMap(vdvw.v.Const.Map);
    vdvw.v.Const.africa.setMap(vdvw.v.Const.Map);
    vdvw.v.Const.australia.setMap(vdvw.v.Const.Map);
}
vdvw.v.initGeocoder = function(){
    vdvw.v.Const.GEOCODER = new google.maps.Geocoder();
}
vdvw.v.initMapCanvasStyles = function(){
    vdvw.v.initContinents();
    
    var latlng = new google.maps.LatLng(11.523087506868512, 50.9765625);
    var latlng2 = new google.maps.LatLng(16.397, 80.644);
    // custom map style array
    var expodiumStyle = [
                                              {
                                                    featureType: "water",
                                                    stylers: [
                                                      {visibility: "simplified"},
                                                      {hue: "#F4F3ED"},
                                                      {lightness: 100}
                                                    ]
                                              },{
                                                    featureType: "administrative.country",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "road",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "administrative",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "landscape",
                                                     stylers: [
                                                             /* { hue: "#0055ff" },
                                                              { saturation: 23 },
                                                              { lightness: -32 },*/
                                                              {lightness: 100},
                                                              {visibility: "off"}
                                                            ]
                                              },{
                                                    featureType: "transit",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "landscape",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "poi",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "landscape.man_made"
                                              }
                                            ];

    // custom map type
    var expodiumMapType = new google.maps.StyledMapType(expodiumStyle,
    {name: "expodium"});

    /* SECOND MAP STYLE */
    var expodiumStyle2 = [
                                              {
                                                    featureType: "water",
                                                    stylers: [
                                                      {visibility: "simplified"},
                                                      {lightness: 100}
                                                    ]
                                              },{
                                                    featureType: "administrative.country",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "road",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "administrative",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "landscape",
                                                     stylers: [
                                                              {hue: "#0055ff"},
                                                              {saturation: 23},
                                                              {lightness: -32}
                                                            ]
                                              },{
                                                    featureType: "transit",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "landscape",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "poi",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              }
                                            ];

    // custom map type
    expodiumMapType2 = new google.maps.StyledMapType(expodiumStyle2,
    {name: "expodium2"});

    /* END SECOND MAP STYLE */

    /* THIRD MAP STYLE */
    var expodiumStyle3 = [
                                              {
                                                    featureType: "administrative.country",
                                                    stylers: [
                                                      {visibility: "simplified"}
                                                    ]
                                              },{
                                                    featureType: "administrative.province",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "administrative.locality",
                                                    stylers: [
                                                      {visibility: "on"}
                                                    ]
                                              },{
                                                    featureType: "administrative.neighborhood",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "administrative.land_parcel",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "landscape",
                                                     stylers: [
                                                              {hue: "#0055ff"},
                                                              {saturation: 23},
                                                              {lightness: -32}
                                                            ]
                                              },{
                                                    featureType: "poi",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "road",
                                                    elementType: "geometry",
                                                    stylers: [
                                                      {visibility: "simplified"},
                                                      {hue: "#00fff7"},
                                                      {saturation: -100},
                                                      {lightness: -42}
                                                    ]
                                              },{
                                                    featureType: "road",
                                                    elementType: "labels",
                                                    stylers: [
                                                      {visibility: "off"}
                                                    ]
                                              },{
                                                    featureType: "water",
                                                    stylers: [
                                                      {visibility: "simplified"},
                                                      {lightness: 100}
                                                    ]
                                              }
                                            ]

    // custom map type
    expodiumMapType3 = new google.maps.StyledMapType(expodiumStyle3,
    {name: "expodium3"});

    /* END THIRD MAP STYLE */
    
    var locUt = xpd.LOCATION_UTRECHT();
    var locUtrecht = new google.maps.LatLng(locUt.Ma, locUt.Na);

    // options startup
    var myOptions = {
      zoom: 2,
      center: locUtrecht,
      backgroundColor: 'white',
      mapTypeControl: false,
      mapTypeControlOptions: {
                    mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'expodium']
            },
      panControl: false,
      zoomControl: true,
      zoomControlOptions: {
            style: google.maps.ZoomControlStyle.LARGE,
            position: google.maps.ControlPosition.LEFT_CENTER
      },
      streetViewControl: false

    };
    
    vdvw.v.Const.Map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
    vdvw.v.Const.Map.mapTypes.set('expodium', expodiumMapType);
    vdvw.v.Const.Map.mapTypes.set('expodium2', expodiumMapType2);
    vdvw.v.Const.Map.mapTypes.set('expodium3', expodiumMapType3);
    vdvw.v.Const.Map.setMapTypeId('expodium');

    google.maps.event.addListener(vdvw.v.Const.Map, 'zoom_changed', function() {
            var zoomLevel = vdvw.v.Const.Map.getZoom();
            if(vdvw.v.Const.Map.getZoom() > 3){
                    vdvw.v.Const.Map.setMapTypeId('expodium3');
                    vdvw.v.clearAbstractMap();
            }
            if(vdvw.v.Const.Map.getZoom() > 5){
                    vdvw.v.Const.Map.setMapTypeId('expodium3');
                    //alert('zoom > 6');
                    vdvw.v.clearAbstractMap();
            }
            if(vdvw.v.Const.Map.getZoom() < 4){
                    vdvw.v.Const.Map.setMapTypeId('expodium');
                    vdvw.v.showAbstractMap();
            }
            if(vdvw.v.Const.Map.getZoom() < 2){
                    vdvw.v.Const.Map.setZoom(2);
            }
    });
    vdvw.v.showAbstractMap();   
}
vdvw.v.drawExpodium = function(){
    var ut = xpd.LOCATION_UTRECHT();
    var startMarker = new google.maps.Marker({
                    position: new google.maps.LatLng( ut.Ma, ut.Na),
                    map: vdvw.v.Const.Map,
                    icon: vdvw.v.Const.expodiumIcon(),
                    title: vdvw.v.Const.expodiumTooltipText(),
                    zIndex: 999999
    });
    xpd.flush.markers.push(startMarker);
}
/**
 * GLOBALS FOR THE VIEW
 */
vdvw.v.ViewStateObject = Class.create({
    initialize: function(){
        this.toggleLegend = false;
        this.toggleAbout = false;
        this.toggleFAQ = false;
        this.toggleBreadcrumb = true;
        this.toggleContentPane = false;
    }
})
/**
 * CONTROLLERS
 */
var ids = [];
vdvw.c = {};
vdvw.c.Startup = Class.create({
    fakeLocations: null,
    fakeDbKey: 0,
    initialize: function(args){
	//alert('heel gevat uit de hoek');
        jQuery('body').append(vdvw.v.FMapCanvas());
        vdvw.v.initMapCanvasStyles();
        vdvw.v.initGeocoder();
        jQuery('body').append(vdvw.v.FProjectTitle());
        jQuery('body').append(vdvw.v.FBreadCrumbWrapper());
        jQuery('body').append(vdvw.v.FAboutLink());
        jQuery('body').append(vdvw.v.FAboutText());
        jQuery('body').append(vdvw.v.FFAQLink());
        jQuery('body').append(vdvw.v.FFAQText());
        jQuery('body').append(vdvw.v.FCover());
        jQuery('body').append(vdvw.v.FCredits());
        jQuery('body').append(vdvw.v.FLegendPic());
	jQuery('body').append(vdvw.v.FLoginWrapper());
        jQuery('body').append(vdvw.v.FContentPaneWrapper());
        jQuery('#breadcrumb').slideDown();
        jQuery('#contentpane-wrapper').jScrollPane({autoReinitialise: true, animateScroll: true, animateDuration: 800});
        jQuery('#faq-text').accordion({autoHeight:false, navigation:true, collapsible:false});
		jQuery('#legend-pic').css('right',-1*vdvw.v.Const.LEGEND_PIC_CROP_RIGHT());
		vdvw.v.adjust.aboutBlockDimensions();
        this.addPermanentEventListeners();
        if(xpd.db == null){
            xpd.db = new vdvw.m.DataBase();
        }
        if(xpd.db == null){
            alert('error initializing local dataset');
        }
        if(fakeItBart == "true"){
            this.fakeLocations = xpd.FAKE_LOCATIONS();
            this.generateFakeData();
            vdvw.c.VisualizeCurrentBooks();
        }
        else{
            vdvw.c.whoIsLoggedIn();
        }
        vdvw.c.afterInit();
    },
    addPermanentEventListeners: function(){
        jQuery('#about-link').click(vdvw.c.onAboutClick);
        jQuery('#about-text').click(vdvw.c.onAboutClick);
        jQuery('#faq-link').click(vdvw.c.onFAQClick);
        jQuery('#close-faq').click(vdvw.c.onFAQClick);
        jQuery('#breadcrumb-toggle').click(vdvw.c.onBreadcrumbClick);
        jQuery('#contentpane-toggle').click(vdvw.c.onContentPaneClick);
        jQuery('#now-what').click(vdvw.c.onReceivedBookClick);
        jQuery('#add-review-button').click(vdvw.c.onAddReviewClick);
        jQuery('#login-link').click(vdvw.c.onLoginClick);
        jQuery('#logout-link').click(vdvw.c.onLogoutClick);
        jQuery('#login-name').click(vdvw.c.onLoginNameClick);
        jQuery('#cms-link').click(vdvw.c.onCmsClick);
        jQuery('#tags-link').click(vdvw.c.onTagsClick);
    },
    generateFakeData: function(){
        
        //console.log('will generate fake data ...');
        
        
        /**
         * each record will have a time stamp.
         * each database entity table will have a hist_ copy.
         * also marked with a timestamp on each write action to the db.
         * 
         * that way, we can get history back when we want to play it back in the gui
         */
        
        // the user 'expodium' in Utrecht
        var xpdUser = new xpd.User(this.fakeDbKey++,xpd.User.EntityName(),'expodium');
        var utrecht = xpd.LOCATION_UTRECHT();
        var xpdLocation = new xpd.Location(this.fakeDbKey++, xpd.Location.EntityName(), utrecht.Ma, utrecht.Na);
        
        
        // the last two arguments mean that a user has only one location
        // (uniqueness on the from-side) whereas this is not true on the to-side
        xpd.db.createAssociationTable(xpd.User.EntityName(), xpd.Relations.has(), xpd.Location.EntityName(), true, false);
        xpd.db.insertAssociation(xpdUser, xpd.Relations.has(), xpdLocation);
        xpd.db.insertEntity(xpdUser);
        xpd.db.insertEntity(xpdLocation);
        // 
        // a book has an 'isWith' relation with a user
        // When user moves, their book(s) will move with them
        
        // the last two arguments mean that a user has only one location
        // (uniqueness on the from-side) whereas this is not true on the to-side
        xpd.db.createAssociationTable(xpd.BookPrint.EntityName(), xpd.Relations.isWith(), xpd.User.EntityName(), true, false);
        
        // a review has one and only one location
        xpd.db.createAssociationTable(xpd.Review.EntityName(), xpd.Relations.has(), xpd.Location.EntityName(), true, false);
        
        // a comment has one and only one location
        xpd.db.createAssociationTable(xpd.Comment.EntityName(), xpd.Relations.has(), xpd.Location.EntityName(), true, false);
        
        // create 20 books with Expodium
        var iter = 0;
        while(iter<20){
            //console.log('adding book ' + iter + ' to DB...');
            var bp = new xpd.BookPrint(iter+'', xpd.BookPrint.EntityName());
            xpd.db.insertEntity(bp);
            xpd.db.insertAssociation(bp, xpd.Relations.isWith(), xpdUser);
            iter++;
        }
        // we can already construct a query object to select an existing user who will comment on a review
        var commentUserQuery = vdvw.m.DataBase.createQuery('orderby id random limit 1');
        
        
        // move a random book
        var bkt = xpd.db.table(xpd.BookPrint.EntityName());
        var numBooks = bkt.numRecords();
        
        while(this.fakeLocations.length > 0){
            var randomFakeLocationIndex = Math.floor(staticRand.rand() * (this.fakeLocations.length -1 - 0 + 1)) + 0;
            var randomFakeLocation = this.fakeLocations.splice(randomFakeLocationIndex, 1)[0];
            var randomBookId = Math.floor(staticRand.rand() * (numBooks));
            var randomBook = bkt.select(randomBookId);
            var randomName = vdvw.v.Const.RAND_NAMES()[Math.floor(staticRand.rand() * vdvw.v.Const.RAND_NAMES().length)];
            // we now have to create a new user on a random location
            var randomUser = new xpd.User(this.fakeDbKey,xpd.User.EntityName(), randomName);
            this.fakeDbKey++;
            var randomLocation = new xpd.Location(this.fakeDbKey++, xpd.Location.EntityName(), randomFakeLocation.Ma, randomFakeLocation.Na);
            xpd.db.insertAssociation(randomUser, xpd.Relations.has(), randomLocation);
            xpd.db.insertEntity(randomUser);
            xpd.db.insertEntity(randomLocation);
            // now because the 'isWith' association is unique for a book, 
            // the old relation will automatically be history
            xpd.db.insertAssociation(randomBook, xpd.Relations.isWith(), randomUser);
            // create reviews for this book
            var numReviewsForThisBook = 2 * (Math.floor(staticRand.rand() * (xpd.RANDOM_AVERAGE_REVIEWS_PER_BOOK()+1)));
            
            
            
            while(this.fakeLocations.length > 0 && numReviewsForThisBook > 0){
                numReviewsForThisBook--;
                var randomFakeLocationIndex = Math.floor(staticRand.rand() * (this.fakeLocations.length));
                var randomFakeLocation = this.fakeLocations.splice(randomFakeLocationIndex, 1)[0];
                var userWhoReviews = randomUser;
                var randomHeader = vdvw.v.Const.RAND_HEADERS()[Math.floor(staticRand.rand() * vdvw.v.Const.RAND_HEADERS().length)];
                // a review has only one owner so we do not use a relation table here
                var rev = new xpd.Review(this.fakeDbKey, xpd.Review.EntityName(), Math.floor(new Date().getTime() / 1000), randomHeader, vdvw.v.Const.RAND_CONT(), userWhoReviews.id);
                this.fakeDbKey++;
                
                // the location for the review has to be created
                var lc = new xpd.Location(this.fakeDbKey, xpd.Location.EntityName(), randomFakeLocation.Ma, randomFakeLocation.Na);
                this.fakeDbKey++;
                
                // insert entities
                xpd.db.insertEntity(rev);
                xpd.db.insertEntity(lc);
                
                // insert relation
                xpd.db.insertAssociation(rev, xpd.Relations.has(), lc);
                
                
                var numCommentsForReview = 2 * (Math.floor(staticRand.rand() * (xpd.RANDOM_AVERAGE_COMMENTS_PER_REVIEW()+1)));
                while(this.fakeLocations.length > 0 && numCommentsForReview > 0){
                    numCommentsForReview--;
                    // random location for the comment
                    var cRandomFakeLocationIndex = Math.floor(staticRand.rand() * (this.fakeLocations.length));
                    var cRandomFakeLocation = this.fakeLocations.splice(cRandomFakeLocationIndex, 1)[0];
                    var clc = new xpd.Location(this.fakeDbKey, xpd.Location.EntityName(), cRandomFakeLocation.Ma, cRandomFakeLocation.Na);
                    this.fakeDbKey++;
                    
                    // pick a user to comment
                    var userWhoComments = xpd.db.table(xpd.User.EntityName()).select(commentUserQuery)[0];
                    
                    // random header
                    var randHd = vdvw.v.Const.RAND_HEADERS()[Math.floor(staticRand.rand() * vdvw.v.Const.RAND_HEADERS().length)];
                    
                    // create comment
                    var comm = new xpd.Comment(
                        this.fakeDbKey, 
                        xpd.Comment.EntityName(), 
                        Math.floor(new Date().getTime() / 1000), 
                        randHd, 
                        vdvw.v.Const.RAND_CONT_COMM(), 
                        userWhoComments.id,
                        rev.type,
                        rev.id
                    );
                    xpd.db.insertEntity(comm);
                    xpd.db.insertEntity(clc);
                    xpd.db.insertAssociation(comm, xpd.Relations.has(), clc);
                }
            }
        }
    }
})
/**
 * CONTROLLERS ACTIVATED BY EVENTS
 */
vdvw.c.onContentPaneClick = function(event){
    if(xpd.viewState.toggleContentPane){
            xpd.viewState.toggleContentPane = false;
            jQuery('#contentpane-container').animate({
                right: '-500px'
            }, 
            'fast', 
            function() {

            });
    } else {
            xpd.viewState.toggleContentPane = true;
            jQuery('#contentpane-container').animate({

            right: '0'
            }, 
            'fast', 
            function() {
                if(xpd.viewState.toggleFAQ){
                    xpd.viewState.toggleFAQ = false;
                    jQuery('#faq-wrap').fadeOut();
                } 
                if(xpd.viewState.toggleAbout){
                    xpd.viewState.toggleAbout = false;
                    jQuery('#about-text').fadeOut();
                }
            });
    }
}
vdvw.c.onLegendClick = function(event){
    if(xpd.viewState.toggleLegend){
            xpd.viewState.toggleLegend = false;
            jQuery('#legend-pic').animate({
                bottom: '-130'
            }, 
            'fast', 
            function() {

            });
    } else {
            xpd.viewState.toggleLegend = true;
            jQuery('#legend-pic').animate({

            bottom: '0'
            }, 
            'fast', 
            function() {

            });
    }
}
vdvw.c.onAboutClick = function(event){
    if(xpd.viewState.toggleAbout){
            xpd.viewState.toggleAbout = false;
            jQuery('#about-text').fadeOut();
    } else {
            xpd.viewState.toggleAbout = true;
			vdvw.v.adjust.aboutBlockDimensions();
            jQuery('#about-text').fadeIn();
            if(xpd.viewState.toggleFAQ){
                xpd.viewState.toggleFAQ = false;
                jQuery('#faq-wrap').fadeOut();
            } 
            if(xpd.viewState.toggleContentPane){
                    xpd.viewState.toggleContentPane = false;
                    jQuery('#contentpane-container').animate({
                        right: '-500px'
                    }, 
                    'fast', 
                    function() {

                    });
            }
    }
}
vdvw.c.onFAQClick = function(event){
    
    if(xpd.viewState.toggleFAQ){
            xpd.viewState.toggleFAQ = false;
            jQuery('#faq-wrap').fadeOut();
    } else {
            xpd.viewState.toggleFAQ = true;
            jQuery('#faq-wrap').fadeIn();
            if(xpd.viewState.toggleAbout){
                xpd.viewState.toggleAbout = false;
                jQuery('#about-text').fadeOut();
            }
            if(xpd.viewState.toggleContentPane){
                    xpd.viewState.toggleContentPane = false;
                    jQuery('#contentpane-container').animate({
                        right: '-500px'
                    }, 
                    'fast', 
                    function() {

                    });
            }
    }
}
vdvw.c.onFAQItemClick = function(event){
    jQuery(".faq p").hide("fast");
    jQuery(this).toggle("fast");
}
vdvw.c.breadcrumbCollapse = function(){
	jQuery('#breadcrumb').animate({
		height: '35px'
	}, 'fast', function() {
		// Animation complete.	
	});
        //jQuery("#breadcrumb-toggle").css('background','#ccc');
}
vdvw.c.breadcrumbExpand = function(){
    var optel = 0;
    jQuery("#breadcrumb").children().each(function(){optel += jQuery(this).outerHeight();});
    jQuery('#breadcrumb').animate({
        height: Math.ceil(optel)+'px'
  }, 'fast', function() {
    // Animation complete.
  });
  //jQuery("#breadcrumb-toggle").css('background','#333');
}
vdvw.c.onBreadcrumbClick = function(event){
    if(xpd.viewState.toggleBreadcrumb){
    	xpd.viewState.toggleBreadcrumb = false;
    	vdvw.c.breadcrumbCollapse();
    } else {
    	xpd.viewState.toggleBreadcrumb = true;
    	vdvw.c.breadcrumbExpand();           
    }
}
vdvw.c.identify = function(idString){
    // e.g. "fcf-user-3"
    if(!(idString.substr(0,4) == "fcf-")){
        alert("id in vdvw.c.identify handler not an fcf typed id");
    }
    var idSplit = idString.split("-");
    return {type:idSplit[1],id:idSplit[2]};
}
vdvw.c.click = function(type,id){
    vdvw.c.VisualizeConnections(type,id);
}
vdvw.c.onClick = function(e){
    var type = null;
    var id = null;
    if(e.hasOwnProperty("fcf_type") && e.hasOwnProperty("fcf_id")){
        type = e.fcf_type;
        id = e.fcf_id;
    }else{
        var identify = vdvw.c.identify(jQuery(this).attr("id"));
        id = identify.id;
        type = identify.type;
    }
    if(null == type || null == id){
        alert("type and id of clicked item were not found, this should not happen")
    }else{
        vdvw.c.VisualizeConnections(type,id);
    }
}
/*
vdvw.c.onMouseOver = function(event){
    var representedData;
    if(event.hasOwnProperty('refData')){
        representedData = event.refData;
    }else{
        var tryBubble = jQuery(this);
        var iter = 0;
        var body = jQuery('body');
        while(iter <4){
            if(tryBubble.data('refData') != undefined){
                representedData = tryBubble.data('refData');
                break;
            }
            tryBubble = tryBubble.parent();
            iter++;
        }
    }
}*/
vdvw.c.onAddCommentClick = function(id){
    drp.test.addCommentDialog(id,'review');
}
vdvw.c.onDeleteClick = function(type, id, descr){
    drp.test.deleteDialog({type:type,id:id,descr:descr});
}
vdvw.c.onAddReviewClick = function(reviewedBookId){
    drp.test.addReviewDialog(reviewedBookId);
}
vdvw.c.onReceivedBookClick = function(event){
    drp.test.receivedBookDialog();
}
vdvw.c.onLoginClick = function(event){
    drp.test.loginDialog();
}
vdvw.c.onLogoutClick = function(event){
    drp.test.createLogoutDialog();
}
vdvw.c.onLoginNameClick = function(event){
    var uid = vdvw.m.Session.getUid();
    var mappedUser = xpd.Mappers.getUserForId(uid);
    drp.test.settingsDialog(mappedUser);
}
vdvw.c.onCmsClick=function(event){
    drp.test.cmsPanel(vdvw.v.Const.retrieveCmsPanel());
}
vdvw.c.onTagsClick=function(event){
    drp.test.tagsDialog();
}
vdvw.c.soundCloudInit = function(){
	SC.initialize({
    	client_id: "e22560b336fd3bd57923bf448233323c",
    	redirect_uri: document.location.href,
  	});
};
vdvw.c.dataRefresh = function(type,id){
    drp.postTR({id:"getData",comm:[drp.tr.comm.getData()]}, function(rsp){
        xpd.flush.clearMap();
        xpd.db = new vdvw.m.DataBase();
        var rs = rsp.getData.result;
        // we will iterate (a lot)
        var i = 0;
        var i2 = 0;
        
        if(rs.hasOwnProperty('location')){
            if(rs.location instanceof Array){
                var lcs = rs.location;
                // can have "Ma","Na","time","id"
                i = 0;
                while( i < lcs.length ){
                    var lc = lcs[i];
                    var lcObj = new xpd.Location(lc.id, xpd.Location.EntityName(), lc.Ma, lc.Na);
                    xpd.db.insertEntity(lcObj);
                    i++;
                }
            }
        }
        
        if(rs.hasOwnProperty('question')){
            if(rs.question instanceof Array){
                var qs = rs.question;
                i = 0;
                while (i < qs.length ){
                    var q = qs[i];
                    var qObj = new xpd.Question(q.id, xpd.Question.EntityName(), q.question, q.answer);
                    xpd.db.insertEntity(qObj);
                    i++;
                }
            }
        }
        
        // tags may be associated to reviews or to comments
        var reviewHasTagStr = xpd.Review.EntityName() + xpd.Relations.has() + xpd.Tag.EntityName();
        xpd.db.createAssociationTable(xpd.Review.EntityName(), xpd.Relations.has(), xpd.Tag.EntityName(), false, false);
        var commentHasTagStr = xpd.Comment.EntityName() + xpd.Relations.has() + xpd.Tag.EntityName();
        xpd.db.createAssociationTable(xpd.Comment.EntityName(), xpd.Relations.has(), xpd.Tag.EntityName(), false, false);
        
        
        if(rs.hasOwnProperty('tag')){
            if(rs.tag instanceof Array){
                var tgs = rs.tag;
                i = 0;
                while (i < tgs.length ){
                    var t = tgs[i];
                    var tObj = new xpd.Tag(t.id, xpd.Tag.EntityName(), t.tag, t.description);
                    xpd.db.insertEntity(tObj);
                    i++;
                }
            }
        }
        // remember the table to add associations later
        var tagTab = xpd.db.table(xpd.Tag.EntityName());
        
        // users have a location
        xpd.db.createAssociationTable(xpd.User.EntityName(), xpd.Relations.has(), xpd.Location.EntityName(), true, false);
        
        // for the associations of user objects to location objects we need the table
        var lcTab = xpd.db.table(xpd.Location.EntityName());
        
        if(rs.hasOwnProperty('user')){
            if(rs.user instanceof Array){
                var uss = rs.user;
                // can have id, ownLocation and screenName
                i = 0;
                while( i < uss.length ){
                    var us = uss[i];
                    var usObj = new xpd.User(us.id, xpd.User.EntityName(), us.screenName, us.loginName, us.mail);
                    xpd.db.insertEntity(usObj);
                    xpd.db.insertAssociation(usObj, xpd.Relations.has(), lcTab.select(us.ownLocation[0].id));
                    i++;
                }
            }
        }
        
        // books can be with a user
        xpd.db.createAssociationTable(xpd.BookPrint.EntityName(), xpd.Relations.isWith(), xpd.User.EntityName(), true, false);
        
        // we need the user table for the association
        var userTab = xpd.db.table(xpd.User.EntityName());
        
        if(rs.hasOwnProperty("book")){
            if(rs.book instanceof Array){
                var bks = rs.book;
                // can have "id","sharedUser"
                i = 0;
                while( i < bks.length ){
                    var bk = bks[i];
                    var bkObj = new xpd.BookPrint(bk.id, xpd.BookPrint.EntityName());
                    xpd.db.insertEntity(bkObj);
                    if(bk.hasOwnProperty("sharedUser")){
                        var bkUserArr = bk.sharedUser;
                        i2 = 0;
                        while( i2 < bkUserArr.length){
                            var bkUserId = bkUserArr[i2].id;
                            xpd.db.insertAssociation(bkObj, xpd.Relations.isWith(), userTab.select(bkUserArr[i2].id));
                            i2++;
                        }
                    }
                    i++;
                }
            }
        }
        
        xpd.db.createAssociationTable(xpd.Review.EntityName(), xpd.Relations.has(), xpd.Location.EntityName(), true, false);
        
        if(rs.hasOwnProperty("review")){
            if(rs.review instanceof Array){
                var rvs = rs.review;
                // can have "body","header","id","ownLocation","sharedUser"
                i = 0;
                while( i < rvs.length ){
                    var rv = rvs[i];
                    var rvObj = new xpd.Review(rv.id, xpd.Review.EntityName(), rv.time, rv.header, rv.body, rv.sharedUser[0].id);
                    xpd.db.insertEntity(rvObj);
                    xpd.db.insertAssociation(rvObj, xpd.Relations.has(), lcTab.select(rv.ownLocation[0].id));
                    if(rv.hasOwnProperty("sharedTag")){
                        rv.sharedTag.each(function(v,k){
                            xpd.db.insertAssociation(rvObj, xpd.Relations.has(), tagTab.select(v.id));
                        });
                    }
                    i++;
                }
            }
        }
        
        xpd.db.createAssociationTable(xpd.Comment.EntityName(), xpd.Relations.has(), xpd.Location.EntityName(), true, false);
        
        if(rs.hasOwnProperty("comment")){
            if(rs.comment instanceof Array){
                var cms = rs.comment;
                // can have "body","header","id","ownLocation","time","sharedReview"
                i = 0;
                while( i < cms.length ){
                    var cm = cms[i];
                    if(!cm.sharedReview){i++;continue;} // don't display comments of which the review has been deleted'
					var cmObj = new xpd.Comment( cm.id, xpd.Comment.EntityName(), cm.time, cm.header, cm.body, cm.sharedUser[0].id, xpd.Review.EntityName(), cm.sharedReview[0].id);
                    xpd.db.insertEntity(cmObj);
                    xpd.db.insertAssociation(cmObj, xpd.Relations.has(), lcTab.select(cm.ownLocation[0].id));
                    if(cm.hasOwnProperty("sharedTag")){
                        cm.sharedTag.each(function(v,k){
                            xpd.db.insertAssociation(cmObj, xpd.Relations.has(), tagTab.select(v.id));
                        });
                    }
                    i++;
                }
            }
        }
        if(!( !type || !id)){
            if(type==xpd.Review.EntityName())
                vdvw.c.VisualizeConnectionsForReviewId(id);
            else if(type==xpd.Comment.EntityName())
                vdvw.c.VisualizeConnectionsForCommentId(id);
            else if(type==xpd.User.EntityName()){
                vdvw.c.click(xpd.User.EntityName(), id);
            }   
        }else{
            vdvw.c.VisualizeCurrentBooks();
        }
    });
}
vdvw.c.removeFromContentPane = function(type,id){
    var JQ_elementToBeRemoved = jQuery("#contentpane #fcf-" + type + "-" + id).remove();
}
vdvw.c.whoIsLoggedIn = function(){
    var cmd = drp.tr.comm.checkUser();
    drp.postTR({id:"checkUser",comm:[cmd]}, function(d){
        if(d.checkUser.result.hasOwnProperty("id")){
            if(d.checkUser.result.id > 0){
                vdvw.m.Session.setUid(d.checkUser.result.id);
                jQuery("#login-link").hide();
                jQuery("#logout-link").show();
                jQuery("#now-what").hide();
                jQuery("#login-name").html(jQuery("#loginNameTPL").render({name:d.checkUser.result.screenName}));
                jQuery("#login-name").show();
                var showCmsButton = false;
                $H(d.checkUser.result.userRoles).each(function(pair){
                    if(pair.value == "moderator" || pair.value == "sysadmin"){
                        showCmsButton = true;
                        throw $break;
                    }
                });
                if(showCmsButton){
                    vdvw.c.InitCmsPanel();
                    jQuery("#cms-link").show();
                }else{
                    vdvw.c.DestroyCmsPanel();
                    jQuery("#cms-link").hide();
                }
                vdvw.c.dataRefresh(xpd.User.EntityName(), d.checkUser.result.id);
                return;
            }
        }
        jQuery("#login-link").show();
        jQuery("#logout-link").hide();
        vdvw.c.dataRefresh();
    });               
}
vdvw.c.InitCmsPanel = function(){
    
    jQuery("#cmsPanel").remove();
    var emptyPanel = jQuery("#cmsPanelTPL").render({});
    var JQ_emptyPanel = jQuery(emptyPanel);
    var panel = JQ_emptyPanel.appendTo(jQuery("body"));
    var replaceTypeInItemsListClass = function(typeName){
        var JQ_itemsList = jQuery("#cms-itemsList");
        var itemsListClass = JQ_itemsList.attr("class");
        var newItemsListClass = "";
        if(itemsListClass){
            itemsListClass = itemsListClass.split(" ");
            itemsListClass.each(function(v,k){
                var newClass = "";
                if(v.substr(0,9) == "itemtype-"){
                    newClass = "itemtype-" + typeName;
                }else{
                    newClass = v;
                }
                newItemsListClass += (newItemsListClass == "") ? newClass : " " + newClass;
            });
        }else{
            newItemsListClass = "itemtype-" + typeName;
        }
        JQ_itemsList.attr("class", newItemsListClass);
    }
    var getTypeFromItemsListClass = function(){
        var JQ_itemsList = jQuery("#cms-itemsList");
        var itemsListClass = JQ_itemsList.attr("class");
        if(itemsListClass){
            itemsListClass = itemsListClass.split(" ");
            var result;
            itemsListClass.each(function(v,k){
                if(v.substr(0,9) == "itemtype-"){
                    result =  v.substr(9);
                    throw $break;
                }
            });
            return result;
        }
    }
    jQuery("#cms-mainMenu").find("a").css("cursor","pointer");
    jQuery("#cms-mainMenu").find("a").click(function(event){
        var type = jQuery(event.target).text();
        var table = null;
        var JQ_table = jQuery('<table border="1"></table>');
        if(type == "book"){
            table = xpd.db.table(xpd.BookPrint.EntityName());
        }
        else if(type == "question"){
            table = xpd.db.table(xpd.Question.EntityName());
        }
        else if(type == "user"){
            table = xpd.db.table(xpd.User.EntityName());
        }
        else if(type == "review"){
            table = xpd.db.table(xpd.Review.EntityName());
        }
        else if(type == "comment"){
            table = xpd.db.table(xpd.Comment.EntityName());
        }
        else if(type == "tag"){
            table = xpd.db.table(xpd.Tag.EntityName());
        }
        if(!table){
            alert("no " + type + " table in local dataset!");
            return;
        }
        $H(table.records).each(function(pair){
            var id = pair.key;
            var fields = pair.value;
            var JQ_tableHeader = (JQ_table.children().length == 0) ? jQuery("<tr></tr>") : false;
            if(JQ_tableHeader) JQ_tableHeader.append("<th></th>");
            var JQ_tableRow = jQuery('<tr></tr>');
            JQ_tableRow.append('<td><input type="checkbox" name="'+id+'" value="'+id+'" /></td>')
            $H(fields).each(function(pair){
                var fieldName = pair.key;
                var fieldValue = pair.value;
                if(typeof(fieldValue) !="function"){
                    if(JQ_tableHeader) JQ_tableHeader.append("<th>"+fieldName+"</th>");
                    JQ_tableRow.append("<td>"+fieldValue+"</td>");
                }
            });
            if(JQ_tableHeader) JQ_table.append(JQ_tableHeader);
            JQ_table.append(JQ_tableRow);
        });
        var JQ_itemsList = jQuery("#cms-itemsList");
        JQ_itemsList.children().first().replaceWith(JQ_table);
        JQ_table.find("input[type=checkbox]").click(function(event){
            var selectedId = jQuery(event.target).val();
            var checked = jQuery(event.target).attr("checked") == "checked";
            var JQ_list = jQuery("#cms-itemsList");
            JQ_list.find("input[type=checkbox]").removeAttr("checked");
            if(checked) JQ_list.find("input[type=checkbox][value="+selectedId+"]").attr("checked","checked");
        });
        JQ_itemsList.show();
        JQ_itemsList.css("height","400");
        replaceTypeInItemsListClass(type);
        var JQ_commands = jQuery("#cms-commands");
        JQ_commands.show();
        var JQ_fieldsList = jQuery("#cms-fieldsList");
        JQ_fieldsList.hide();
        JQ_commands.find("button").click(function(event){
            var commandClicked = jQuery(event.target).text();
            var type = getTypeFromItemsListClass();
            var className = type.substr(0,1).toUpperCase() + type.substr(1);
            var id = jQuery("#cms-itemsList").find("input[type=checkbox][checked=checked]").val();
            if(className == "Book") className = "BookPrint";
            var subj;
            if (typeof(id) == "undefined"){
                alert("no item selected");
                return;
            }else{
                var table = xpd.db.table(type);
                subj = table.select(id);
            }
            var JQ_fieldsList = jQuery("#cms-fieldsList");
            var JQ_table = jQuery('<table border="1" id="fieldsTab"></table>');
            var JQ_tableHeader = jQuery("<tr></tr>");
            JQ_table.append(JQ_tableHeader);
            JQ_tableHeader.append("<th>field</th>");
            JQ_tableHeader.append("<th>value</th>");
            $H(subj).each(function(pair){
                if(typeof(pair.value)!= "function"){
                    var JQ_tableRow = jQuery("<tr></tr>");
                    JQ_table.append(JQ_tableRow);
                    JQ_tableRow.append("<td>"+pair.key+"</td>");
                    var JQ_ValueField = jQuery("<td></td>");
                    if(pair.key == "id" || pair.key == "type"){
                        JQ_ValueField.text(pair.value);
                    }else{
                        var JQ_input = jQuery('<input type="text"></input>');
                        JQ_input.val(pair.value);
                        JQ_ValueField.append(JQ_input);
                    }
                    JQ_tableRow.append(JQ_ValueField);
                }
            });
            JQ_fieldsList.children().remove();
            JQ_fieldsList.append(JQ_table);
            JQ_okBtn = jQuery('<button id="ok">SAVE CHANGES</button>');
            JQ_fieldsList.append(JQ_okBtn);
            JQ_okBtn.click(function(event){
                var JQ_fieldsTab = jQuery("#fieldsTab");
                var JQ_fields = JQ_fieldsTab.find("tr");
                JQ_fields.splice(0,1);//remove table heads row
                var type;
                var id;
                var keyvals = {};
                JQ_fields.each(function(index,field){
                    var key = jQuery(field).find("td").first().text();
                    var value = jQuery(field).find("td").eq(1).find("input").val();
                    if(!(value)) value = jQuery(field).find("td").eq(1).text();
                    if(key == "id") id = value;
                    else if(key == "type") type = value;
                    else keyvals[key] = value;
                });
                if(typeof(id)=="undefined"){
                    alert("error: no id");
                }else{
                    keyvals["id"] = id;
                }
                var cmd = drp.tr.comm.generic(type, "store", [keyvals]);
                drp.postTR({id:"genstor",comm:[cmd]}, function(rsp){
                    alert("Great success, high five. The data will be refreshed. Click the type in the upper table to see the refreshed data.");
                    vdvw.c.dataRefresh(this.type, this.id)
                }.bind({id:id,type:type}), function(err){
                    var rr = "rr";
                });
                // display the result
                // let the user click OK for a data refresh
            })
            JQ_fieldsList.show();
            jQuery("#cms-commands").hide();
            jQuery("#cms-itemsList").hide();
        });
    });
}
vdvw.c.DestroyCmsPanel = function(){
    vdvw.c.InitCmsPanel();
}
vdvw.c.cmsClassNameClick = function(event){
    var className = jQuery(event.target).text();
    var ids = xpd.Mapped[className].getIds();
}
vdvw.c.openHelpForId = function(id){
    var searchIndexForId = -1;
    jQuery(".vdvw-faq-question").each(function(index,value){
        if(jQuery(value).attr("id") == id){
            searchIndexForId = index;
        }
    });
    if(searchIndexForId == -1){
        alert("no help topic found for " + id);
        return;
    }
    if(!(xpd.viewState.toggleFAQ)){
        vdvw.c.onFAQClick();
    }
    jQuery('#faq-text').accordion('activate',searchIndexForId);
}

/**
 * CONTROLLERS THAT PULL DATA FROM THE MAPPERS AND PUSH TO THE VIZ
 */
vdvw.c.VisualizeCurrentBooks = function(){
    xpd.flush.clearMap();
    xpd.viz.drawBreadCrumb(jQuery('#allBooks').render());
    vdvw.c.ShowBookLocations();
}
vdvw.c.ShowBookLocations = function(){
    var booksWithUsers = xpd.Mappers.getBooksAtCurrentLocations();
    if(booksWithUsers){
        booksWithUsers.each(function(bookWithUser){
            var icon = xpd.viz.icon.factorForBookWithUserDrop(bookWithUser);
            xpd.viz.drawIcon(icon, xpd.User.EntityName(), bookWithUser.ownerId);
        });
    }
}
vdvw.c.ShowBookLocationSelected = function(selectId){
    var bk = xpd.Mappers.getBookAtCurrentLocationForId(selectId);
    var bookIcon = xpd.viz.drawIcon(xpd.viz.icon.factorForBookWithUserWhite(bk), bk.id, bk.type);
}
vdvw.c.ShowBookLocationsExcept = function(exceptId){
    var booksWithUsers = xpd.Mappers.getBooksAtCurrentLocations();
    booksWithUsers.each(function(bk){
        if(bk.id == exceptId) return;
        var bookIcon = xpd.viz.drawIcon(xpd.viz.icon.factorForBookWithUser(bk), bk.ownerType, bk.ownerId);
    });
}
vdvw.c.VisualizeConnections = function(type,id){
    vdvw.c.closeFaqAndAbout();
    xpd.flush.clearMap();
    if(type == xpd.BookPrint.EntityName()){
        var currentBookstop = xpd.Mappers.getBookAtCurrentLocationForId(id)[0];
        vdvw.c.VisualizeTraceForBook(id, currentBookstop.ownerId);
    }
    else if(type == xpd.Comment.EntityName()){
        vdvw.c.VisualizeConnectionsForCommentId(id);
    }
    else if(type == xpd.Review.EntityName()){
    	vdvw.c.VisualizeConnectionsForReviewId(id);
    }
    else if(type == xpd.User.EntityName()){
    	var bookstop = xpd.Mappers.getBookStopForUserId(id);
        if(bookstop){
            vdvw.c.VisualizeTraceForBook(bookstop.id, id);
            vdvw.c.VisualizeActionsForUserId(id);
            vdvw.c.ShowBookLocationsExcept(bookstop.id);
        }
    }
    else if(type == xpd.Tag.EntityName()){
        vdvw.c.VisualizeItemsForTagId(id);
    }
    else{
        alert("cannot display type: " + type);
    }
}
vdvw.c.VisualizeActionsForUserId = function(userId){
    var comments = xpd.Mappers.getCommentsForUser(userId);
    var reviews = xpd.Mappers.getReviewsForBookOwner(userId);
    reviews.each(function(review){
        vdvw.c.VisualizeReview(review,false,true);
    });
    comments.each(function(comment){
        vdvw.c.VisualizeComment(comment);
    });
}
vdvw.c.VisualizeComment = function(mappedComment,visualizeCommenter,drawCommentToCommenterLine){
    var icon = xpd.viz.icon.factorForComment(mappedComment);
    var comMarker = xpd.viz.drawIcon(icon, mappedComment.type, mappedComment.id);
    if(drawCommentToCommenterLine){
        var lineFromLocation = new google.maps.LatLng(mappedComment.ownerMa, mappedComment.ownerNa); 
        var line = xpd.viz.drawLine('#688', lineFromLocation, comMarker.getPosition(), false, 1);
    }
    xpd.viz.drawBreadCrumb(jQuery("#commentByUser").render(mappedComment));
    if(visualizeCommenter){
        vdvw.c.VisualizeUserOnTheMap(mappedComment.ownerId);
    }
    return comMarker;
}
vdvw.c.VisualizeReview = function(mappedReview,visualizeReviewer,visualizeReviewerToReviewLine){
    var icon = xpd.viz.icon.factorForReview(mappedReview);
    var revMarker = xpd.viz.drawIcon(icon, mappedReview.type, mappedReview.id);
    if(visualizeReviewerToReviewLine){
        var lineFromLocation = new google.maps.LatLng(mappedReview.ownerLocation.Ma, mappedReview.ownerLocation.Na);
        var line = xpd.viz.drawLine('#c00', lineFromLocation, revMarker.getPosition(), false, 1);
    }
    xpd.viz.drawBreadCrumb(jQuery("#currentBookReview").render(mappedReview));
    if(visualizeReviewer){
        vdvw.c.VisualizeUserOnTheMap(mappedReview.ownerId);
    }
    return revMarker;
}
vdvw.c.VisualizeTraceForBook = function(bookId, selectedUserId){
    vdvw.v.drawExpodium();
    var bookstops = xpd.Mappers.getTraceForBook(bookId);
    var markerFrom = null;
    var returnMarker = null;
    for( var iter = 0; iter < bookstops.length; ++iter){
        var isFirstBookStop = iter == 0;
        var isLastBookStop = iter == bookstops.length -1;
        var isNormalBookStop = !isLastBookStop && !isFirstBookStop;
        var bookstop = bookstops[iter];
        var type = xpd.User.EntityName();
        var id = bookstop.ownerId;
        var initLocation = xpd.LOCATION_UTRECHT();
        var initLatLng = new google.maps.LatLng(initLocation.Ma,initLocation.Na);
        var breadcrumb = null; 
        var line = null;
        var markerTo = null;
        var userIcon = null;
        var userIsSelectedUser = selectedUserId == bookstop.ownerId;
        if(isFirstBookStop && !isLastBookStop){
            if(userIsSelectedUser) userIcon = xpd.viz.icon.factorForUserNoLabel(bookstop.Ma, bookstop.Na, bookstop.ownerName, bookstop.ownerId);
            else userIcon = xpd.viz.icon.factorForUser(bookstop.Ma, bookstop.Na, bookstop.ownerName, bookstop.ownerId);
            markerTo = xpd.viz.drawIcon(userIcon, type, id);
            line = xpd.viz.drawLine('#333', initLatLng, markerTo.getPosition(), true, 1.5);
            breadcrumb = jQuery('#bookTraceFirst').render(bookstop);
        }
        else if(isNormalBookStop){
            if(userIsSelectedUser) userIcon = xpd.viz.icon.factorForUserNoLabel(bookstop.Ma, bookstop.Na, bookstop.ownerName, bookstop.ownerId);
            else userIcon = xpd.viz.icon.factorForUser(bookstop.Ma, bookstop.Na, bookstop.ownerName, bookstop.ownerId);
            markerTo = xpd.viz.drawIcon(userIcon, type, id);
            line = xpd.viz.drawLine('#333', markerFrom.getPosition(), markerTo.getPosition(), true, 1.5);
            breadcrumb = jQuery('#bookTrace').render(bookstop);
        }
        else{
            var icon = xpd.viz.icon.factorForBookWithUserWhite(bookstop.Ma, bookstop.Na, bookstop.ownerName, bookstop.id);
            markerTo = xpd.viz.drawIcon(icon, type, id);
            if(isFirstBookStop){
                line = xpd.viz.drawLine('#333', initLatLng, markerTo.getPosition(), true, 1.5);
            }else{
                line = xpd.viz.drawLine('#333', markerFrom.getPosition(), markerTo.getPosition(), true, 1.5);
            }
            breadcrumb = jQuery('#bookTraceLast').render(bookstop);
        }
        markerFrom = markerTo;
        var bc = xpd.viz.drawBreadCrumb(breadcrumb, type, id);
        if(typeof(selectedUserId) != "undefined"){
            if(id == selectedUserId){
                vdvw.c.drawTeaserForIcon(bookstop.ownerName, bookstop.Ma, bookstop.Na, markerTo, bookstop.id, isLastBookStop);
            }
        }
    }
    return returnMarker;
}
vdvw.c.VisualizeUserOnTheMap = function(userId){
    var userBookStop = xpd.Mappers.getBookStopForUserId(userId);
    var bookstopNow = xpd.Mappers.getBookAtCurrentLocationForId(userBookStop.id)[0];
    var ownerHasBookNow = bookstopNow.ownerId == userBookStop.ownerId;
    var userIcon;
    var userMarker;
    if(!ownerHasBookNow){
        userIcon = xpd.viz.icon.factorForUser(userBookStop.Ma, userBookStop.Na, userBookStop.ownerName, userBookStop.id);
    }else{
        userIcon = xpd.viz.icon.factorForBookWithUserWhite(userBookStop.Ma, userBookStop.Na, userBookStop.ownerName, userBookStop.id);
    }
    userMarker = xpd.viz.drawIcon(userIcon, userBookStop.ownerType, userBookStop.ownerId);
}
vdvw.c.VisualizeConnectionsForReviewId = function(reviewId){
    xpd.flush.clearMap();
    var review = xpd.Mappers.getMappedReviewForReview(xpd.Mappers.getReviewForId(reviewId));
    vdvw.c.VisualizeUserOnTheMap(review.ownerId);
    var reviewMarker = xpd.viz.drawIcon(xpd.viz.icon.factorForReview(review), review.type, review.id);
    var reviewerLocation = new google.maps.LatLng(review.ownerLocation.Ma, review.ownerLocation.Na);
    xpd.viz.drawLine('#c00', reviewerLocation, reviewMarker.getPosition(), false, 1);
    var bc = xpd.viz.drawBreadCrumb(jQuery('#currentBookReview').render(review));
    review.mappedComments.each(function(comment){
        var commentMarker = vdvw.c.VisualizeComment(comment,true);
        xpd.viz.drawLine('#c00', commentMarker.getPosition(), reviewMarker.getPosition(), false, 1);
    });
    var factoredReview = xpd.viz.contentpane.factorForReview(review);
    var JQ_reviewInContentPane = xpd.viz.drawContentPane(factoredReview);
    var reviewWithAddedComments = xpd.viz.contentpane.addCommentsToReview(JQ_reviewInContentPane, review.mappedComments);
    reviewWithAddedComments.find(".xpd-tag").click(vdvw.c.onClick);
    reviewWithAddedComments.find(".xpd-tag").css({'cursor': 'pointer', 'text-decoration': 'underline'});
    reviewWithAddedComments.find(".fcf-click").click(vdvw.c.onClick);
    reviewWithAddedComments.find(".fcf-click").css('cursor','pointer');
    xpd.viz.contentpane.selectComment(null, review.id);
}
vdvw.c.VisualizeConnectionsForCommentId = function (commentId) {
    xpd.flush.clearMap();
    var mappedComment = xpd.Mappers.getMappedCommentForComment(xpd.db.table(xpd.Comment.EntityName()).select(commentId));
    var review = xpd.Mappers.getReviewForId(mappedComment.commentedEntityId);
    var mappedReview = xpd.Mappers.getMappedReviewForReview(review);
    var commentMarker = vdvw.c.VisualizeComment(mappedComment, true);
    var commentedReviewMarker = vdvw.c.VisualizeReview(mappedReview,true,true);
    xpd.viz.drawLine('#888', commentMarker.getPosition(), commentedReviewMarker.getPosition(), false, 1);
    var factoredReview = xpd.viz.contentpane.factorForReview(mappedReview);
    var JQ_reviewInContentPane = xpd.viz.drawContentPane(factoredReview);
    var reviewWithAddedComments = xpd.viz.contentpane.addCommentsToReview(JQ_reviewInContentPane, mappedReview.mappedComments);
    reviewWithAddedComments.find(".xpd-tag").click(vdvw.c.onClick);
    reviewWithAddedComments.find(".xpd-tag").css({'cursor': 'pointer', 'text-decoration': 'underline'});
    reviewWithAddedComments.find(".fcf-click").click(vdvw.c.onClick);
    reviewWithAddedComments.find(".fcf-click").css('cursor','pointer');
    xpd.viz.contentpane.selectComment(mappedComment.id, mappedReview.id);
}
vdvw.c.drawTeaserForIcon = function(ownerName, Ma, Na, targetMarker, bookId, isCurrentOwner){
    var defaultLocationString = "location: " + Ma + "," + Na;
    var geocodedLocationString = "";
    var latlng = new google.maps.LatLng(Ma,Na);
    vdvw.v.Const.GEOCODER.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if(results[1]){
                geocodedLocationString = results[1].formatted_address;
            }
        }
        if(geocodedLocationString == ""){
            xpd.viz.drawTeaser(ownerName, defaultLocationString, targetMarker, bookId, isCurrentOwner);
        }else{
            xpd.viz.drawTeaser(ownerName, geocodedLocationString, targetMarker, bookId, isCurrentOwner);
        }

    });
}
vdvw.c.closeFaqAndAbout = function(){
    if(xpd.viewState.toggleFAQ){
        xpd.viewState.toggleFAQ = false;
        jQuery('#faq-wrap').fadeOut();
    } 
    if(xpd.viewState.toggleAbout){
        xpd.viewState.toggleAbout = false;
        jQuery('#about-text').fadeOut();
    }
}
vdvw.c.VisualizeItemsForTagId = function(id){
    var revs = xpd.Mappers.getReviewsForTagId(id);
    var coms = xpd.Mappers.getCommentsForTagId(id);
    revs.each(function(v){
        vdvw.c.VisualizeReview(v, false, false);
    });
    coms.each(function(v){
        vdvw.c.VisualizeComment(v, false, false);
    });
}
/**
 * SHOW SOMETHING ON THE SCREEN
 */
xpd.viz = {};
xpd.viz.breadcrumb = {};
xpd.viz.contentpane = {};
xpd.viz.icon = {};
xpd.viz.teaser = {};

xpd.viz.breadcrumb.fadeHistorically = function () {
    var opacityMax = vdvw.v.Const.BREADCRUMB_MAX_OPACITY();
    var fontsizeMax = vdvw.v.Const.BREADCRUMB_MAX_FONTSIZE();
    var opacityMin = vdvw.v.Const.BREADCRUMB_MIN_OPACITY();
    var fontSizeMin = vdvw.v.Const.BREADCRUMB_MIN_FONTSIZE();
    var opStep = (opacityMax - opacityMin ) / vdvw.v.Const.MAX_ELEMENTS_IN_BREADCRUMB();
    var ftStep = (fontsizeMax - fontSizeMin ) / vdvw.v.Const.MAX_ELEMENTS_IN_BREADCRUMB();
    var iter = 0;
    jQuery('#breadcrumb p').each(function(){
    	jQuery(this).css('opacity',opacityMax-(opStep*iter)+'');
        jQuery(this).css('font-size', Math.floor(fontsizeMax-(ftStep*iter))+'px');
        iter++;
    });
}
xpd.viz.contentpane.factorForReview = function (review) { 
    var JQ_renderedReview = jQuery(jQuery('#reviewExpanded').render(review));
    if(!review.writable){
        JQ_renderedReview.find(".vdvw-delete-button").remove();
    }
    var JQ_tagsContainer = JQ_renderedReview.find(".tagsContainer");
    if(review.tags){
        review.tags.each(function(v,k){
            JQ_tagsContainer.append('<span class="xpd-tag" title="'+ v.description +'" id="fcf-' + v.type + '-' + v.id + '">' + v.tag + '</span>');
        });
    }
    return JQ_renderedReview;
}
xpd.viz.contentpane.addCommentsToReview = function(jq_review, mappedComments){
    var JQ_reviewDiv = jq_review;
    var JQ_commentsContainer = JQ_reviewDiv.find(".commentsContainer");
    mappedComments.each(function(mappedComment){
        var factoredComment = xpd.viz.contentpane.factorForComment(mappedComment);
        JQ_commentsContainer.append(factoredComment);
        var commentsContainerChildren = JQ_commentsContainer.children();
        var JQ_addedComment = jQuery(commentsContainerChildren[commentsContainerChildren.length-1]);
        if(!mappedComment.writable){
            JQ_addedComment.find(".vdvw-delete-button").remove();
        }
    });
    return JQ_reviewDiv;
}
xpd.viz.contentpane.factorForComment = function (comment) { 
    var rr = jQuery('#commentExpanded').render(comment);
    var JQ_comment = jQuery(rr);
    var JQ_tagsContainer = JQ_comment.find(".tagsContainer");
    if(comment.tags){
        comment.tags.each(function(v,k){
            JQ_tagsContainer.append('<span class="xpd-tag" title="' + v.description + '" id="fcf-' + v.type + '-' + v.id + '">' + v.tag + '</span>');
        });
    }
    return JQ_comment;
}
xpd.viz.contentpane.selectComment = function(commentIdNullable, reviewId){
    var JQ_selectedComment = null;
    var JQ_selectedReview = null;
    var heightCount = 0;
    var JQ_contentpane = jQuery("#contentpane");
    var contentPaneChildren = JQ_contentpane.children();
    var iter = 0;
    while(iter < contentPaneChildren.length){
        var reviewDiv = contentPaneChildren[iter];
        var JQ_reviewDiv = jQuery(reviewDiv);
        heightCount += JQ_reviewDiv.outerHeight();
        if(vdvw.c.identify(JQ_reviewDiv.attr("id")).id == reviewId){
            JQ_selectedReview = JQ_reviewDiv;
            if(null == commentIdNullable){
                //todo change review background
                JQ_selectedReview.css('background', '#888');
            }
            heightCount -= JQ_reviewDiv.outerHeight();
            break;
        }
        iter++;
    }
    if(null != commentIdNullable){
        iter = 0;
        var selectedReviewCommentsContainerChildren = JQ_selectedReview.find(".commentsContainer").children();
        while(iter<selectedReviewCommentsContainerChildren.length){
            var commentDiv = selectedReviewCommentsContainerChildren[iter];
            var JQ_commentDiv = jQuery(commentDiv);
            if(vdvw.c.identify(JQ_commentDiv.attr("id")).id == commentIdNullable){
                    JQ_selectedComment = JQ_commentDiv;
                    //todo change comment background
                    JQ_commentDiv.css('background', '#888');
                    break;
            }else{
                    heightCount += JQ_commentDiv.outerHeight();
            }
            iter++;
        }
    }
    setTimeout(function(){
            var pane = jQuery('#contentpane-wrapper');
            var api = pane.data('jsp');
            api.scrollToY(heightCount+'');
    },100);
}
xpd.viz.icon.factorForUser = function (Ma, Na, userName, userId) {
    return new MarkerWithLabel({
        position: new google.maps.LatLng( Ma, Na ),
        icon: vdvw.v.Const.stopIcon(),
        labelContent: userName,
        labelAnchor: new google.maps.Point(-2, 35),
        labelClass: "marker-label user",
        title: vdvw.v.Const.bookTitle(userId, userName)
    });
}
xpd.viz.icon.factorForUserNoLabel = function (Ma, Na, userName, userId) {
    return new google.maps.Marker({
        position: new google.maps.LatLng( Ma, Na ),
        icon: vdvw.v.Const.stopIconNoLabel(),
        title: vdvw.v.Const.bookTitle(userId, userName)
    });
}
xpd.viz.icon.factorForReview = function (review) {
    var excerpt = review.head.substring(0,18) + '..';
    return new MarkerWithLabel({
        position: new google.maps.LatLng( review.Ma, review.Na ),
        icon: vdvw.v.Const.reviewIcon(),
        labelContent: excerpt,
        labelAnchor: new google.maps.Point(-11, 36),
        labelClass: "marker-label reviewer",
        title: 'review: "' + review.head + '"'
    });
}
xpd.viz.icon.factorForCenterPoint = function (center) {
    return new MarkerWithLabel ({
        position: center,
        icon: vdvw.v.Const.centerIcon(),
        labelAnchor: new google.maps.Point(-10, 10),
        labelContent: '',
        labelClass: "marker-center",
        title: 'titeltje'
    })
}
xpd.viz.icon.factorForComment = function (comment) {
    var excerpt = comment.head.substring(0,18) + '..';
    return new MarkerWithLabel({
        position: new google.maps.LatLng( comment.Ma, comment.Na ),
        icon: vdvw.v.Const.commentIcon(),
        labelAnchor: new google.maps.Point(-5, 34),
        labelContent: excerpt,
        labelClass: "marker-label comment",
        title: comment.ownerName + ' commented on the item: "' + comment.commentedEntityHead + '"'
    });
}
xpd.viz.icon.factorForBookWithUser = function (bookWithUser) {
    return new google.maps.Marker({
        position: new google.maps.LatLng( bookWithUser.Ma, bookWithUser.Na ),
        icon: vdvw.v.Const.iconForBook(bookWithUser.id),
        title: vdvw.v.Const.bookTitle(bookWithUser.id, bookWithUser.ownerName)
    });
}
xpd.viz.icon.factorForBookWithUserWhite = function (Ma,Na,userName,userId) {
    return new google.maps.Marker({
        position: new google.maps.LatLng( Ma, Na ),
        icon: vdvw.v.Const.iconForBookWhite(userId),
        title: vdvw.v.Const.bookTitle(userId, userName),
        zIndex: 999
    });
}
xpd.viz.icon.factorForBookWithUserDrop = function (bookWithUser) {
    return new google.maps.Marker({
        position: new google.maps.LatLng( bookWithUser.Ma, bookWithUser.Na ),
        icon: vdvw.v.Const.iconForBook(bookWithUser.id),
        animation: google.maps.Animation.DROP,
        title: vdvw.v.Const.bookTitle(bookWithUser.id, bookWithUser.ownerName)
    });
}
xpd.viz.teaser.factorForReview = function (review) {
    //create reference marker
    return new google.maps.Marker({
        position: new google.maps.LatLng( review.Ma, review.Na ),
        icon: vdvw.v.Const.iconForBook(review.id),
        title: vdvw.v.Const.reviewTitle(review.id, review.ownerName)
    });
}
xpd.viz.drawIcon = function(icon, type, id){
    google.maps.event.addListenerOnce(icon, 'click', (function(icon){
        return function(){vdvw.c.onClick(icon);}
    })(icon));
    // add hover listener for connecting line
    /*google.maps.event.addListener(icon, 'mouseover', (function(icon){
        return function(){vdvw.c.onMouseOver(icon);}
    })(icon));*/
    icon.setMap(vdvw.v.Const.MAP());
    xpd.flush.addMarker(icon);
    icon.fcf_type = type;
    icon.fcf_id = id;
    return icon;
}
xpd.viz.drawLine = function(webcolorString, from, to, krom, dik){
    var line = new google.maps.Polyline({ 
			geodesic: krom, 
			path: [from, to], 
			strokeColor: webcolorString, 
			strokeOpacity: 1, 
			strokeWeight: dik
		});
    line.setMap(vdvw.v.Const.MAP());
    // we add a centerpoint on the line yes
    
    if(krom){
        var geodesicCenterPoint = line.GetPointAtDistance(from.distanceFrom(to)/2);
        //var centerMarkerGeo = xpd.viz.drawIcon(xpd.viz.icon.factorForCenterPoint(geodesicCenterPoint));
    } else {
        var normalCenterPoint = line.GetPointAtDistance(from.distanceFrom(to)/2);
        //var centerMarkerNorm = xpd.viz.drawIcon(xpd.viz.icon.factorForCenterPoint(normalCenterPoint));
    }
    
    xpd.flush.addLine(line);
    return line;
}
xpd.viz.drawTeaser = function(name, address, refMarker, bookId, isCurrentOwner){
    var neptext = 'Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they havent seen you in a year. And the good thing about dogs... is they got different dogs for different people. Like pit bulls. The dog of dogs. Pit bull can be the right mans best friend... or the wrong mans worst enemy. You going to give me a dog for a pet, give me a pit bull. Give me... Raoul. Right, Omar? Give me Raoul.';
    var excerpt = neptext.substring(0,50) + '...';
    var contentString = '<div class="teaser pointer">' + 
                            '<img src="app/images/site/pointer.png"/>'  + 
                        '</div>' + 
                        '<div class="teaser head">' + 
                            'book ' + bookId;
    contentString +=        isCurrentOwner ? ' is with:' : '  earlier:';
    contentString +=        '<br/>' + name + 
                        '</div>' +
                        '<div class="teaser excerpt">' + 
                            address +
                        '</div>';
    var options = {
                 content: contentString
                ,disableAutoPan: true
                ,maxWidth: 0
                ,pixelOffset: new google.maps.Size(25,-30)
                ,zIndex: null
                ,boxStyle: { 
                   background: "#000"
                  ,opacity: 0.75
                  ,width: "200px"
                  ,height: "auto"
                 }
                ,closeBoxMargin: "0px 0px 0px 0px"
                ,closeBoxURL: "app/images/site/close.png"
                ,infoBoxClearance: new google.maps.Size(1, 1)
                ,isHidden: false
                ,pane: "floatPane"
                ,enableEventPropagation: false
        };
    var ib = new InfoBox(options);
    
    xpd.flush.addTeaser(ib);
    ib.open(vdvw.v.Const.MAP(), refMarker);
    //ib.setContent(renderContentForObject(content));
    ib.open(vdvw.v.Const.MAP(),refMarker);
}
xpd.viz.drawOwnedTeaser = function(bookId, bookOwner, refMarker){
    var neptext = 'Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they havent seen you in a year. And the good thing about dogs... is they got different dogs for different people. Like pit bulls. The dog of dogs. Pit bull can be the right mans best friend... or the wrong mans worst enemy. You going to give me a dog for a pet, give me a pit bull. Give me... Raoul. Right, Omar? Give me Raoul.';
    var id = parseInt(bookId)+1;
    var excerpt = neptext.substring(0,50) + '...';
    var contentString = '<div class="teaser owner">' +'owner of book no. ' + id +':'+'</div>';
    var options = {
                 content: contentString
                ,disableAutoPan: true
                ,maxWidth: 0
                ,pixelOffset: new google.maps.Size(5,-50)
                ,zIndex: null
                ,boxStyle: { 
                   background: "transparent"
                  ,opacity: 0.75
                  ,width: "180px"
                  ,height: "15"
                 }
                ,closeBoxMargin: "0px 0px 0px 0px"
                ,closeBoxURL: "app/images/site/close.png"
                ,infoBoxClearance: new google.maps.Size(1, 1)
                ,isHidden: false
                ,pane: "floatPane"
                ,enableEventPropagation: false
        };
    var ib = new InfoBox(options);
    
    xpd.flush.addTeaser(ib);
    ib.open(vdvw.v.Const.MAP(), refMarker);
    //ib.setContent(renderContentForObject(content));
    ib.open(vdvw.v.Const.MAP(),refMarker);
}
xpd.viz.drawBreadCrumb = function(bcDiv){
    var bcContainer = jQuery("#breadcrumb");
    if(bcContainer.children().length > vdvw.v.Const.MAX_ELEMENTS_IN_BREADCRUMB()){
        bcContainer.children().last().remove();
    }
    bcContainer.prepend(bcDiv);
    var result = bcContainer.children().first();
    xpd.viz.breadcrumb.fadeHistorically();
    if(xpd.viewState.toggleBreadcrumb){
        vdvw.c.breadcrumbExpand();
    }
    result.find(".fcf-click").click(vdvw.c.onClick);
}
xpd.viz.drawContentPane = function(reviewDivContainingComments){
    if(!(xpd.viewState.toggleContentPane)){
        xpd.viewState.toggleContentPane = true;
        jQuery('#contentpane-container').animate({

            right: '0'
        }, 
        'fast', 
        function() {

            });
    }
    var contentPane = jQuery("#contentpane");
    var replaced = false;
    var JQ_reviewDiv = jQuery(reviewDivContainingComments);
    contentPane.children().each(function(index,reviewElement){
        var existingId = vdvw.c.identify(jQuery(reviewElement).attr("id")).id;
        var candidateId = vdvw.c.identify(JQ_reviewDiv.attr("id")).id;
        if(existingId == candidateId){
            jQuery(reviewElement).replaceWith(JQ_reviewDiv);
            replaced = true;
        }
    });
    if(!replaced){
        contentPane.prepend(JQ_reviewDiv);
    }
    JQ_reviewDiv = jQuery(contentPane).find(JQ_reviewDiv);
    if(contentPane.children().length > vdvw.v.Const.MAX_ELEMENTS_IN_CONTENTPANE()){
        contentPane.children().last().remove();
    }
    return JQ_reviewDiv;
}

/**
 * FLUSH FUNCTIONS
 */
xpd.flush = {};
xpd.flush.markers = [];
xpd.flush.lines = [];
xpd.flush.teasers = [];
xpd.flush.clearMap = function(){
    xpd.flush.lines.each(function(line){
        line.setMap(null);
        google.maps.event.clearInstanceListeners(line);
    });
    xpd.flush.lines = [];
    xpd.flush.markers.each(function(marker){
        marker.setMap(null);
        google.maps.event.clearInstanceListeners(marker);
    })
    xpd.flush.markers = [];
    //flush teasers
    xpd.flush.teasers.each(function(teaser){
        teaser.setMap(null);
        google.maps.event.clearInstanceListeners(teaser);
    });
    xpd.flush.teasers = [];
}
xpd.flush.addMarker = function(marker){
    xpd.flush.markers.push(marker);
}
xpd.flush.addLine = function(line){
    xpd.flush.lines.push(line);
}
xpd.flush.addTeaser = function(teaser){
    xpd.flush.lines.push(teaser);
}
/**
 * SOME HOOKS INTO THE CONTROLLER CLASS
 */
vdvw.c.afterInit = function(){
    var i = 0;
    while(i < RunAfterInit.length){
        var func = RunAfterInit[i];
        func.func.apply(null,func.args);
        i++;
    }
}
/**
* SINGLETONS
*/
xpd.db = null;
xpd.viewState = new vdvw.v.ViewStateObject();
